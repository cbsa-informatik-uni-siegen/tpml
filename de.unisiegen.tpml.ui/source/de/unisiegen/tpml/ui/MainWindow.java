/*
 * MainWindow.java
 *
 * Created on 15. September 2006, 14:56
 */

package de.unisiegen.tpml.ui;

import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.prefs.Preferences;

import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import org.apache.log4j.Logger;

import de.unisiegen.tpml.core.languages.Language;
import de.unisiegen.tpml.core.languages.LanguageFactory;
import de.unisiegen.tpml.core.languages.NoSuchLanguageException;

/**
 * TODO add documentation here.
 * 
 * @author Christoph Fehling
 * @version $Rev$
 * 
 * @see de.unisiegen.tpml.ui.Main
 */
public class MainWindow extends javax.swing.JFrame {
	//
	// Constants
	//
	
	/**
	 * The unique serialization identifier for this class. 
	 */
	private static final long serialVersionUID = -3820623104618482450L;
	
	/**
	 * The preferences for the <code>de.unisiegen.tpml.ui</code> package.
	 */
	private static final Preferences preferences = Preferences.userNodeForPackage(MainWindow.class);
	
	
	
	//
	// Constructor
	//

	/**
	 *  Creates new form <code>MainWindow</code>.
	 */
	public MainWindow() {
		initComponents();

		setTitle("TPML " + Versions.UI);
		// TODO clean up the setting of states
		setGeneralStates(false);
		this.saveItem.setEnabled(false);
		this.saveButton.setEnabled(false);
		this.preferencesItem.setEnabled(false);
		this.copyItem.setEnabled(false);
		this.pasteItem.setEnabled(false);
		this.recentlyUsed0.setVisible(false);
		this.recentlyUsed1.setVisible(false);
		this.recentlyUsed2.setVisible(false);
		this.recentlyUsed3.setVisible(false);
		
		// apply the last "advanced mode" setting
		boolean advanced = preferences.getBoolean("advanced", false);
		this.advancedRadioButton.setSelected(advanced);
		this.beginnerRadioButton.setSelected(!advanced);
		
		addWindowListener(new WindowAdapter() {
			@Override	public void windowClosing(WindowEvent e) {
				MainWindow.this.handleQuit();
			}
		});
		this.editorPanelListener = new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				editorStatusChange(evt.getPropertyName(), evt.getNewValue());
			}
		};
		
		this.recentlyUsed = new LinkedList<File>();
		updateRecentlyUsed();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JMenuBar MainMenuBar;
        javax.swing.JMenu editMenu;
        javax.swing.JSeparator editMenuSeparator1;
        javax.swing.JSeparator editMenuSeperator;
        javax.swing.JToolBar editToolBar;
        javax.swing.JMenu fileMenu;
        javax.swing.JSeparator fileMenuSeperator1;
        javax.swing.JSeparator fileMenuSerpator2;
        javax.swing.JToolBar mainToolbar;
        javax.swing.JButton newButton;
        javax.swing.JMenuItem newItem;
        javax.swing.JButton openButton;
        javax.swing.JMenuItem openItem;
        javax.swing.JMenuItem quitItem;
        javax.swing.JMenu runMenu;

        modeSettingsGroup = new javax.swing.ButtonGroup();
        mainToolbar = new javax.swing.JToolBar();
        jToolBar1 = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        editToolBar = new javax.swing.JToolBar();
        cutButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        MainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newItem = new javax.swing.JMenuItem();
        openItem = new javax.swing.JMenuItem();
        closeItem = new javax.swing.JMenuItem();
        fileMenuSeperator1 = new javax.swing.JSeparator();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        saveAllItem = new javax.swing.JMenuItem();
        fileMenuSerpator2 = new javax.swing.JSeparator();
        recentlyUsed0 = new javax.swing.JMenuItem();
        recentlyUsed1 = new javax.swing.JMenuItem();
        recentlyUsed2 = new javax.swing.JMenuItem();
        recentlyUsed3 = new javax.swing.JMenuItem();
        fileMenuSeperator3 = new javax.swing.JSeparator();
        quitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoItem = new javax.swing.JMenuItem();
        redoItem = new javax.swing.JMenuItem();
        editMenuSeparator1 = new javax.swing.JSeparator();
        cutItem = new javax.swing.JMenuItem();
        copyItem = new javax.swing.JMenuItem();
        pasteItem = new javax.swing.JMenuItem();
        editMenuSeperator = new javax.swing.JSeparator();
        preferencesItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        smallstepItem = new javax.swing.JMenuItem();
        bigstepItem = new javax.swing.JMenuItem();
        typecheckerItem = new javax.swing.JMenuItem();
        runMenuSeparator1 = new javax.swing.JSeparator();
        beginnerRadioButton = new javax.swing.JRadioButtonMenuItem();
        advancedRadioButton = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("mainframe");
        mainToolbar.setFloatable(false);
        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/new24.png")));
        newButton.setToolTipText("New File");
        newButton.setBorderPainted(false);
        newButton.setOpaque(false);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(newButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/open24.png")));
        openButton.setToolTipText("Open File");
        openButton.setBorderPainted(false);
        openButton.setOpaque(false);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/save24.png")));
        saveButton.setToolTipText("Save File");
        saveButton.setBorderPainted(false);
        saveButton.setOpaque(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(saveButton);

        saveAsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/saveas24.png")));
        saveAsButton.setToolTipText("Save File As...");
        saveAsButton.setBorderPainted(false);
        saveAsButton.setOpaque(false);
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(saveAsButton);

        mainToolbar.add(jToolBar1);

        editToolBar.setMaximumSize(new java.awt.Dimension(32767, 40));
        cutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/cut24.gif")));
        cutButton.setToolTipText("Cut");
        cutButton.setBorderPainted(false);
        cutButton.setOpaque(false);
        editToolBar.add(cutButton);

        copyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/copy24.gif")));
        copyButton.setToolTipText("Copy");
        copyButton.setBorderPainted(false);
        copyButton.setOpaque(false);
        editToolBar.add(copyButton);

        pasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/paste24.gif")));
        pasteButton.setToolTipText("Paste");
        pasteButton.setBorderPainted(false);
        pasteButton.setOpaque(false);
        editToolBar.add(pasteButton);

        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/undo24.gif")));
        undoButton.setBorderPainted(false);
        undoButton.setOpaque(false);
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        editToolBar.add(undoButton);

        redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/redo24.gif")));
        redoButton.setToolTipText("Redo the last step.");
        redoButton.setBorderPainted(false);
        redoButton.setOpaque(false);
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        editToolBar.add(redoButton);

        mainToolbar.add(editToolBar);

        getContentPane().add(mainToolbar, java.awt.BorderLayout.NORTH);

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("FileMnemonic").charAt(0));
        fileMenu.setText("File");
        newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/new16.gif")));
        newItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("NewMnemonic").charAt(0));
        newItem.setText("New");
        newItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemActionPerformed(evt);
            }
        });

        fileMenu.add(newItem);

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/open16.png")));
        openItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("OpenMnemonic").charAt(0));
        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });

        fileMenu.add(openItem);

        closeItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/empty16.gif")));
        closeItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("CloseMnemonic").charAt(0));
        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });

        fileMenu.add(closeItem);

        fileMenu.add(fileMenuSeperator1);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/save16.png")));
        saveItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("SaveMnemonic").charAt(0));
        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveItem);

        saveAsItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/saveas16.png")));
        saveAsItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("SaveAsMnemonic").charAt(0));
        saveAsItem.setText("Save As...");
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveAsItem);

        saveAllItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAllItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/saveAll16.gif")));
        saveAllItem.setText("Save All...");
        saveAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveAllItem);

        fileMenu.add(fileMenuSerpator2);

        recentlyUsed0.setText("Item");
        recentlyUsed0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentlyUsed0ActionPerformed(evt);
            }
        });

        fileMenu.add(recentlyUsed0);

        recentlyUsed1.setText("Item");
        fileMenu.add(recentlyUsed1);

        recentlyUsed2.setText("Item");
        fileMenu.add(recentlyUsed2);

        recentlyUsed3.setText("Item");
        fileMenu.add(recentlyUsed3);

        fileMenu.add(fileMenuSeperator3);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/empty16.gif")));
        quitItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("QuitMnemonic").charAt(0));
        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });

        fileMenu.add(quitItem);

        MainMenuBar.add(fileMenu);

        editMenu.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("EditMnemonic").charAt(0));
        editMenu.setText("Edit");
        undoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/undo16.gif")));
        undoItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("UndoMnemonic").charAt(0));
        undoItem.setText("Undo");
        undoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoItemActionPerformed(evt);
            }
        });

        editMenu.add(undoItem);

        redoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/redo16.gif")));
        redoItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("RedoMnemonic").charAt(0));
        redoItem.setText("Redo");
        redoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoItemActionPerformed(evt);
            }
        });

        editMenu.add(redoItem);

        editMenu.add(editMenuSeparator1);

        cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/cut16.gif")));
        cutItem.setText("Cut");
        cutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutItemActionPerformed(evt);
            }
        });

        editMenu.add(cutItem);

        copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/copy16.gif")));
        copyItem.setText("Copy");
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });

        editMenu.add(copyItem);

        pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/paste16.gif")));
        pasteItem.setText("Paste");
        pasteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteItemActionPerformed(evt);
            }
        });

        editMenu.add(pasteItem);

        editMenu.add(editMenuSeperator);

        preferencesItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/unisiegen/tpml/ui/icons/empty16.gif")));
        preferencesItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("PreferencesMnemonic").charAt(0));
        preferencesItem.setText("Preferences");
        preferencesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesItemActionPerformed(evt);
            }
        });

        editMenu.add(preferencesItem);

        MainMenuBar.add(editMenu);

        runMenu.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("RunMnemonic").charAt(0));
        runMenu.setText("Proof");
        smallstepItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        smallstepItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("SmallStepMnemonic").charAt(0));
        smallstepItem.setText("Small Step");
        smallstepItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallstepItemActionPerformed(evt);
            }
        });

        runMenu.add(smallstepItem);

        bigstepItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        bigstepItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("BigStepMnemonic").charAt(0));
        bigstepItem.setText("Big Step");
        bigstepItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bigstepItemActionPerformed(evt);
            }
        });

        runMenu.add(bigstepItem);

        typecheckerItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        typecheckerItem.setMnemonic(java.util.ResourceBundle.getBundle("de/unisiegen/tpml/ui/ui").getString("TypeCheckerMnemonic").charAt(0));
        typecheckerItem.setText("Type Checker");
        typecheckerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typecheckerItemActionPerformed(evt);
            }
        });

        runMenu.add(typecheckerItem);

        runMenu.add(runMenuSeparator1);

        modeSettingsGroup.add(beginnerRadioButton);
        beginnerRadioButton.setSelected(true);
        beginnerRadioButton.setText("Beginner");
        beginnerRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                beginnerRadioButtonItemStateChanged(evt);
            }
        });

        runMenu.add(beginnerRadioButton);

        modeSettingsGroup.add(advancedRadioButton);
        advancedRadioButton.setText("Advanced");
        advancedRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                advancedRadioButtonItemStateChanged(evt);
            }
        });

        runMenu.add(advancedRadioButton);

        MainMenuBar.add(runMenu);

        setJMenuBar(MainMenuBar);

        setBounds(0, 0, 706, 561);
    }// </editor-fold>//GEN-END:initComponents

    private void advancedRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_advancedRadioButtonItemStateChanged
        if (this.advancedRadioButton.isSelected()) {
            for (Component component : this.tabbedPane.getComponents()) {
            	if (component instanceof EditorPanel) {
            		EditorPanel editorPanel = (EditorPanel)component;
            		// TODO: Set the advanced state of type checker, 
            		// small step and big step interpreter to true
            	}
            }
        }
    }//GEN-LAST:event_advancedRadioButtonItemStateChanged

    private void beginnerRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_beginnerRadioButtonItemStateChanged
        if (this.beginnerRadioButton.isSelected()) {
          for (Component component : this.tabbedPane.getComponents()) {
          	if (component instanceof EditorPanel) {
          		EditorPanel editorPanel = (EditorPanel)component;
          		// TODO: Set the advanced state of type checker, 
          		// small step and big step interpreter to false
          	}
          }
        }
    }//GEN-LAST:event_beginnerRadioButtonItemStateChanged

    private void recentlyUsed0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentlyUsed0ActionPerformed
// TODO add your handling code here:
        openFile(recentlyUsed.get(0));
    }//GEN-LAST:event_recentlyUsed0ActionPerformed

    private void pasteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteItemActionPerformed
// 
        getActiveEditor().handlePaste();
    }//GEN-LAST:event_pasteItemActionPerformed

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
// 
        getActiveEditor().handleCopy();
    }//GEN-LAST:event_copyItemActionPerformed

    private void cutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutItemActionPerformed
// 
        getActiveEditor().handleCut();
    }//GEN-LAST:event_cutItemActionPerformed

    private void saveAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllItemActionPerformed
// TODO add your handling code here:
        handleSaveAll();
    }//GEN-LAST:event_saveAllItemActionPerformed

    private void redoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoItemActionPerformed
// TODO add your handling code here:
        (getActiveEditor()).handleRedo();
    }//GEN-LAST:event_redoItemActionPerformed

        private void undoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoItemActionPerformed
// TODO add your handling code here:
        (getActiveEditor()).handleUndo();
        }//GEN-LAST:event_undoItemActionPerformed

	private void openItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openItemActionPerformed
		// 
		handleOpen();
	}// GEN-LAST:event_openItemActionPerformed

	private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openButtonActionPerformed
		handleOpen();
	}// GEN-LAST:event_openButtonActionPerformed

	private void preferencesItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_preferencesItemActionPerformed
		// TODO add your handling code here:

	}// GEN-LAST:event_preferencesItemActionPerformed

	private void newItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newItemActionPerformed
		// 
		handleNew();
	}// GEN-LAST:event_newItemActionPerformed

	private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_tabbedPaneStateChanged
		// 
		updateEditorStates((EditorPanel) tabbedPane.getSelectedComponent());
	}// GEN-LAST:event_tabbedPaneStateChanged

	private void typecheckerItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_typecheckerItemActionPerformed
		// 
		(getActiveEditor()).handleTypeChecker();
	}// GEN-LAST:event_typecheckerItemActionPerformed

	private void bigstepItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bigstepItemActionPerformed
		// 
		(getActiveEditor()).handleBigStep();
	}// GEN-LAST:event_bigstepItemActionPerformed

	private void smallstepItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_smallstepItemActionPerformed
		// 
		(getActiveEditor()).handleSmallStep();
	}// GEN-LAST:event_smallstepItemActionPerformed

	private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_quitItemActionPerformed
		// 
		handleQuit();
	}// GEN-LAST:event_quitItemActionPerformed

	private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveAsItemActionPerformed
		// 
		getActiveEditor().handleSaveAs();
	}// GEN-LAST:event_saveAsItemActionPerformed

	private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveItemActionPerformed
		// 
		getActiveEditor().handleSave();
	}// GEN-LAST:event_saveItemActionPerformed

	private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeItemActionPerformed
		// 
		handleClose();
		if (getActiveEditor() == null){
			setGeneralStates(false);
		}
	}// GEN-LAST:event_closeItemActionPerformed

	private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_redoButtonActionPerformed
		// 
		(getActiveEditor()).handleRedo();
	}// GEN-LAST:event_redoButtonActionPerformed

	private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_undoButtonActionPerformed
		// 
		(getActiveEditor()).handleUndo();
	}// GEN-LAST:event_undoButtonActionPerformed

	private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveAsButtonActionPerformed
		// 
		getActiveEditor().handleSaveAs();
	}// GEN-LAST:event_saveAsButtonActionPerformed

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
		// 
		getActiveEditor().handleSave();
	}// GEN-LAST:event_saveButtonActionPerformed

	private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newButtonActionPerformed
		// 
		handleNew();
	}// GEN-LAST:event_newButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem advancedRadioButton;
    private javax.swing.JRadioButtonMenuItem beginnerRadioButton;
    private javax.swing.JMenuItem bigstepItem;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JButton copyButton;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JButton cutButton;
    private javax.swing.JMenuItem cutItem;
    private javax.swing.JSeparator fileMenuSeperator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.ButtonGroup modeSettingsGroup;
    private javax.swing.JButton pasteButton;
    private javax.swing.JMenuItem pasteItem;
    private javax.swing.JMenuItem preferencesItem;
    private javax.swing.JMenuItem recentlyUsed0;
    private javax.swing.JMenuItem recentlyUsed1;
    private javax.swing.JMenuItem recentlyUsed2;
    private javax.swing.JMenuItem recentlyUsed3;
    private javax.swing.JButton redoButton;
    private javax.swing.JMenuItem redoItem;
    private javax.swing.JSeparator runMenuSeparator1;
    private javax.swing.JMenuItem saveAllItem;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenuItem smallstepItem;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JMenuItem typecheckerItem;
    private javax.swing.JButton undoButton;
    private javax.swing.JMenuItem undoItem;
    // End of variables declaration//GEN-END:variables
	private PropertyChangeListener editorPanelListener;

	private static final Logger logger = Logger.getLogger(MainWindow.class);
	
	private LinkedList<File> recentlyUsed;

	// Self-defined methods:

       void openFile(File file) {
                if (file == null) {
                        throw new NullPointerException("file is null");
                }
		// TODO clean this up a little bit
		try {
                        // check if we already have an editor panel for the file
                        EditorPanel editorPanel = null;
                        for (Component component : this.tabbedPane.getComponents()) {
                                if (component instanceof EditorPanel && file.equals(((EditorPanel)component).getFile())) {
                                        editorPanel = (EditorPanel)component;
                                        break;
                                }
                        }
                        
                        // if we don't already have the editor panel, create a new one
                        if (editorPanel == null) {
                                LanguageFactory langfactory = LanguageFactory.newInstance();
                                Language language = langfactory.getLanguageByFile(file);

                                StringBuffer buffer = new StringBuffer();
                                FileInputStream in = new FileInputStream(file);
                                int onechar;

                                while ((onechar = in.read()) != -1) {
                                        buffer.append((char) onechar);
                                }

                                editorPanel = new EditorPanel(language, this);
                                tabbedPane.add(editorPanel);

                                editorPanel.setFileName(file.getName());
                                editorPanel.setEditorText(buffer.toString());
                                editorPanel.setFile(file);
                                editorPanel.addPropertyChangeListener(editorPanelListener);
                                //addRecentlyUsed(file);
                        }
                        
                        this.tabbedPane.setSelectedComponent(editorPanel);
                        setGeneralStates(true);
                        updateEditorStates(editorPanel);
                        

                        
		}
                catch (NoSuchLanguageException e) {
			logger.error("Language does not exist.", e);
			JOptionPane.showMessageDialog(this, "File is not supported.",
					"Open File", JOptionPane.ERROR_MESSAGE);
		}
                catch (FileNotFoundException e) {
			logger.error("File specified could not be found", e);
			JOptionPane.showMessageDialog(this, "File could not be found.",
					"Open File", JOptionPane.ERROR_MESSAGE);
		}
                catch (IOException e) {
			logger.error("Could not read from the file specified", e);
			JOptionPane.showMessageDialog(this,
					"Could not read from the file.", "Open File",
					JOptionPane.ERROR_MESSAGE);
		}

        }
        
	private void setGeneralStates(boolean state) {
		smallstepItem.setEnabled(state);
		bigstepItem.setEnabled(state);
		typecheckerItem.setEnabled(state);
		saveAsItem.setEnabled(state);
		saveAsButton.setEnabled(state);
		saveAllItem.setEnabled(state);
		closeItem.setEnabled(state);
		cutItem.setEnabled(state);

		setUndoState(state);
		setRedoState(state);
	}

	private void editorStatusChange(String ident, Object newValue) {
		try {
			if (ident.equals("redoStatus")) {
				setRedoState((Boolean) newValue);
			} else  if (ident.equals("filename")) {
				tabbedPane.setTitleAt(tabbedPane.getSelectedIndex(),
						(String) newValue);
			} else if (ident.equals("undoStatus")) {
				setUndoState((Boolean) newValue);
			} else if (ident.equals("changed")) {
				setChangeState((Boolean) newValue);
				setSaveState((Boolean) newValue);
			} else if (ident.equals("texteditor")){
				cutItem.setEnabled((Boolean) newValue);
				copyItem.setEnabled((Boolean) newValue);
				pasteItem.setEnabled((Boolean) newValue);
			}
		} catch (Exception e) {
		} // This was no Change we look for therefore we do nothing.
		// TODO add correct handling

	}

	private void updateEditorStates(EditorPanel editor) {
                if (editor == null) {
                        setGeneralStates(false);
                }
		if (getActiveEditor() == null) {
			setGeneralStates(false);
                }
		else {
			setRedoState(editor.isRedoStatus());
			setUndoState(editor.isUndoStatus());
			setSaveState(editor.isChanged());
			setChangeState(editor.isChanged());
		}
	}
	
	private void updateRecentlyUsed(){
		int length = this.recentlyUsed.size();
		System.out.println(length);
		if (length > 4) {
			length = 4;
			logger.error("Error: The list of recently used files is larger than four.");
		} 
		for (int i = 0 ; i < length ; i++){
			JMenuItem item = getRecentItem(i);

			item.setEnabled(true);
			item.setVisible(true);
			item.setText("" + (i + 1) + ". " + recentlyUsed.get(i).getName());
			
		}
		this.fileMenuSeperator3.setVisible(length > 0);
	}
	
	private JMenuItem getRecentItem (int number){
		switch (number){
		case 0: return recentlyUsed0;
		case 1: return recentlyUsed1;
		case 2: return recentlyUsed2;
		case 3: return recentlyUsed3;
		default: return null;
		}
	}
	
	public void addRecentlyUsed (File file){
		recentlyUsed.addFirst(file);
        if (recentlyUsed.size() > 4) recentlyUsed.removeLast();
        updateRecentlyUsed();
	}
	
//	public void removeRecentlyUsed (File file){
//		recentlyUsed.remove(file);
//	}

	private void setRedoState(Boolean state) {
		redoButton.setEnabled(state);
		redoItem.setEnabled(state);
	}

	private void setUndoState(Boolean state) {
		undoButton.setEnabled(state);
		undoItem.setEnabled(state);

	}

	private void setSaveState(Boolean state) {
		saveButton.setEnabled(state);
		saveItem.setEnabled(state);
	}

	private void setChangeState(Boolean state) {
		if (state) {
			tabbedPane.setTitleAt(tabbedPane.getSelectedIndex(), "*"
					+ ((EditorPanel) tabbedPane.getSelectedComponent())
							.getFileName());

		} else {
			tabbedPane.setTitleAt(tabbedPane.getSelectedIndex(),
					((EditorPanel) tabbedPane.getSelectedComponent())
							.getFileName());
		}
	}

	private EditorPanel getActiveEditor() {
		return (EditorPanel) tabbedPane.getSelectedComponent();
	}

	private void handleNew() {
		FileWizard wizard = new FileWizard(this, true);
		wizard.setLocationRelativeTo(this);
		wizard.setVisible(true);
		Language language = wizard.getLanguage();

		if (language == null)
			return;

		EditorPanel newEditorPanel = new EditorPanel(language, this);
		tabbedPane.add(newEditorPanel);
		tabbedPane.setSelectedComponent(newEditorPanel);
		newEditorPanel.addPropertyChangeListener(editorPanelListener);
		newEditorPanel.setTexteditor(true);
		setGeneralStates(true);
		updateEditorStates(newEditorPanel);
	}

	private void handleOpen() {
                JFileChooser chooser = new JFileChooser();

                final LanguageFactory factory = LanguageFactory.newInstance();
                chooser.addChoosableFileFilter(new FileFilter() {
                        @Override public boolean accept(File f) {
                                if (f.isDirectory()) {
                                    return true;
                                }
                                try {
                                        factory.getLanguageByFile(f);
                                        return true;
                                }
                                catch (NoSuchLanguageException e) {
                                        return false;
                                }
                        }
                        @Override public String getDescription() {
                                Language[] languages = factory.getAvailableLanguages();
                                StringBuilder builder = new StringBuilder(128);
                                builder.append("Source Files (");
                                for (int n = 0; n < languages.length; ++n) {
                                        if (n > 0) {
                                                builder.append("; ");
                                        }
                                        builder.append("*.");
                                        builder.append(languages[n].getName().toLowerCase());
                                }
                                builder.append(')');
                                return builder.toString();
                        }
                });
                chooser.setAcceptAllFileFilterUsed(false);

                int returnVal = chooser.showOpenDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                        openFile(chooser.getSelectedFile());
                }
	}
	
	private void handleQuit() {
		// be sure to save all files first
		for (Component component : this.tabbedPane.getComponents()) {
			if (component instanceof EditorPanel) {
				EditorPanel editorPanel = (EditorPanel)component;
				if (!editorPanel.isChanged()) {
					continue;
				}
				
				// Custom button text
				Object[] options = { "Yes", "No", "Cancel" };
				int n = JOptionPane.showOptionDialog(this, editorPanel.getFileName()
						+ " contains unsaved changes. Do you want to save?",
						"Save File", JOptionPane.YES_NO_CANCEL_OPTION,
						JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
				switch (n) {
				case 0: // Save changes
					logger.debug("Quit dialog: YES");
					if (!editorPanel.handleSave()) {
						// abort the quit
						return;
					}
					break;
					
				case 1: // Do not save changes
					logger.debug("Quit dialog: NO");
					break;
					
				default: // Cancelled
					logger.debug("Quit dialog: CANCEL");
					return;
				}
			}
		}
		
		// remember the settings
		preferences.putBoolean("advanced", this.advancedRadioButton.isSelected());
		
		// terminate the application
		System.exit(0);
	}

	/**
	 * TODO add documentation here
	 * 
	 * @return true if the active editor could be closed.
	 */
	private boolean handleClose() {
		// TODO clean this up a little bit
		EditorPanel selectedEditor = getActiveEditor();
		if (selectedEditor.isChanged()) {
			// Custom button text
			Object[] options = { "Yes", "No", "Cancel" };
			int n = JOptionPane.showOptionDialog(this, selectedEditor
					.getFileName()
					+ " contains unsaved changes. Do you want to save?",
					"Save File", JOptionPane.YES_NO_CANCEL_OPTION,
					JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
			switch (n) {
			case 0: // Save Changes
				logger.debug("Close dialog: YES");
				boolean success = selectedEditor.handleSave();
				if (success) {
					this.tabbedPane.remove(tabbedPane.getSelectedIndex());
					this.repaint();
				}
				return success;

			case 1: // Do not save changes
				logger.debug("Close dialog: NO");
				this.tabbedPane.remove(tabbedPane.getSelectedIndex());
				this.repaint();
				return true;

			case 2: // Cancelled.
				logger.debug("Close dialog: CANCEL");
				return false;

			default:
				return false;
			}
		} else {
			this.tabbedPane.remove(tabbedPane.getSelectedIndex());
			this.repaint();
			return true;
		}
	}
	
	private void handleSaveAll(){
		int tabcount = tabbedPane.getComponentCount();
		for (int i = 0; i < tabcount; i++){
			if ( !
			((EditorPanel)tabbedPane.getComponentAt(i)).handleSave())
				return;
		}
	}
}
