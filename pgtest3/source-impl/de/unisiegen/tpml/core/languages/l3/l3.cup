import de.unisiegen.tpml.core.expressions.*;
import de.unisiegen.tpml.core.types.*;
import de.unisiegen.tpml.core.exceptions.LanguageParserMultiException;
import de.unisiegen.tpml.core.languages.LanguageParserException;
import de.unisiegen.tpml.core.Messages ;
import java.text.MessageFormat;
import java.util.ArrayList;


/* Helper classes */
action code 
{:
  private static class IdTypePair 
  {
    Identifier id;
    MonoType type;
    
    public IdTypePair(Identifier pId, MonoType pType) 
    { 
      this.id = pId;
      this.type = pType; 
    }
  }
  
  private static class IdExprPair 
  {
    Identifier id;
    Expression expression;
    
    public IdExprPair(Identifier pId, Expression pExpression)
    { 
      this.id = pId; 
      this.expression = pExpression;
    }
  }
 
  private static class Error
  {
    public static void expect(String pSymbol, String ... pTokenSequence)
    {
      expect (0, 0, pSymbol, pTokenSequence);
    }
    
    public static void expect(int pLeft, int pRight, String pSymbol, String ... pTokenSequence)
    {
      String or = Messages.getString ( "Parser.15" ) ;
      String result = "" ;
      for ( int i = 0; i < pTokenSequence.length ; i++)
      {
        if ( i == 0 )
        {
          result += "\"" + pTokenSequence [i] + "\"" ;
        }
        else if ( i == pTokenSequence.length - 1 )
        {
          result += " " + or + " \"" + pTokenSequence [i]+ "\"";
        }
        else
        {
          result += ", \"" + pTokenSequence [i]+ "\"";
        }
      }
      throw new LanguageParserException (  
        MessageFormat.format ( "<html>" + Messages.getString ( "Parser.14" ) + "</html>", 
          result, pSymbol), pLeft, pRight);
    }
  }
  
  private static class Duplicated
  {
    public static void check(Row pRow)
    {
	  ArrayList <Identifier> negativeIdentifiers = new ArrayList <Identifier> ();
	  Expression [ ] rowExpressions = pRow.getExpressions ( ) ;
      for ( int i = 0 ; i < rowExpressions.length ; i ++ )
      {
        if ( rowExpressions[i] instanceof Attribute )
        {
          negativeIdentifiers.clear();
          Attribute attribute1 = (Attribute) rowExpressions[i] ;
          for ( int j = i+1 ; j < rowExpressions.length ; j++ )
          {
            if ( rowExpressions[j] instanceof Attribute )
    	    {
    	      Attribute attribute2 = (Attribute) rowExpressions[j] ;
    	      if ( attribute1.getId().equals(attribute2.getId()))
    	      {
    	        negativeIdentifiers.add(attribute2.getId());
    	      }
    	    }
    	  }
    	  negativeIdentifiers.add ( attribute1.getId() ) ;
    	  LanguageParserMultiException.throwExceptionRow ( negativeIdentifiers ) ;
        }
      }
    }
    
    
    public static void check(Duplication pDuplication)
    {
	  ArrayList <Identifier> negativeIdentifiers = new ArrayList <Identifier> ();
	  Identifier [] identifier = pDuplication.getIdentifiers() ;
      for ( int i = 0 ; i < identifier.length ; i ++ )
      {
        negativeIdentifiers.clear();
        for ( int j = i+1 ; j < identifier.length ; j++ )
        {
          if ( identifier [i].equals(identifier[j]) )
    	  {
  	        negativeIdentifiers.add(identifier[j]);
    	  }
    	}
    	negativeIdentifiers.add ( identifier [i] ) ;
    	LanguageParserMultiException.throwExceptionDuplication ( negativeIdentifiers ) ;
      }
    }
    
    
    public static void check(RowType pRowType)
    {
	  ArrayList <Identifier> negativeIdentifiers = new ArrayList <Identifier> ();
	  Identifier [] identifier = pRowType.getIdentifiers() ;
      for ( int i = 0 ; i < identifier.length ; i ++ )
      {
        negativeIdentifiers.clear();
        for ( int j = i+1 ; j < identifier.length ; j++ )
        {
          if ( identifier [i].equals(identifier[j]) )
    	  {
  	        negativeIdentifiers.add(identifier[j]);
    	  }
    	}
    	negativeIdentifiers.add ( identifier [i] ) ;
    	LanguageParserMultiException.throwExceptionRowType ( negativeIdentifiers ) ;
      }
    }
  }
:}


/* Binary operators */
terminal			PLUS;
terminal			MINUS;
terminal			STAR;
terminal			SLASH;
terminal			MOD;
terminal			EQUAL;
terminal			LESS;
terminal			GREATER;
terminal			LESSEQUAL;
terminal			GREATEREQUAL;

/* Tuple operators */
terminal			FST;
terminal			SND;

/* List operators */
terminal			CONS;
terminal			IS_EMPTY;
terminal			HD;
terminal			TL;
terminal			COLONCOLON;

/* Logical operators */
terminal			AMPERAMPER;
terminal			BARBAR;
terminal			NOT;

/* Syntactic tokens */
terminal			ARROW;
terminal			COLON;
terminal			DOT;
terminal			LPAREN;
terminal			RPAREN;
terminal			PARENPAREN;
terminal			COMMA;
terminal			SEMI;
terminal			LBRACKET;
terminal			RBRACKET;
terminal			BRACKETBRACKET;

/* Keywords */
terminal			LAMBDA;
terminal			LET;
terminal			REC;
terminal			IN;
terminal			IF;
terminal			THEN;
terminal			ELSE;
terminal			TRUE;
terminal			FALSE;

/* Types */
terminal			BOOL;
terminal			INT;
terminal			UNIT;
terminal			MU;
terminal			LIST;

/* Special tokens */
terminal Integer	NUMBER;
terminal Integer	TYPEVARIABLE;
terminal String		IDENTIFIER;
terminal			COMMENT;
terminal Integer[]	PROJECTION;

/* Expression non terminals */
non terminal Expression				expr;
non terminal Expression				simple_expr;
non terminal Expression[]			simple_expr_list;
non terminal Constant				constant;
non terminal BinaryOperator			operator;
non terminal ArithmeticOperator		arithmetic_operator;
non terminal RelationalOperator		relational_operator;
non terminal Identifier				identifier;
non terminal Expression				application;
non terminal InfixOperation 		infix_operation;
non terminal InfixOperation 		infix_operation_plus;
non terminal InfixOperation 		infix_operation_minus;
non terminal InfixOperation 		infix_operation_mult;
non terminal InfixOperation 		infix_operation_div;
non terminal InfixOperation 		infix_operation_mod;
non terminal InfixOperation 		infix_operation_equal;
non terminal InfixOperation 		infix_operation_less;
non terminal InfixOperation 		infix_operation_greater;
non terminal InfixOperation 		infix_operation_less_equal;
non terminal InfixOperation 		infix_operation_greater_equal;
non terminal InfixOperation 		infix_operation_binary_cons;
non terminal And					and;
non terminal Or						or;
non terminal Condition				condition;
non terminal Lambda					lambda;
non terminal Let					let;
non terminal CurriedLet				curried_let;
non terminal Recursion				recursion;
non terminal LetRec					let_rec;
non terminal CurriedLetRec			curried_let_rec;
non terminal UnitConstant			unit_constant;
non terminal BooleanConstant		boolean_constant;
non terminal IntegerConstant		integer_constant;
non terminal Not					not;
non terminal BinaryCons				binary_cons;
non terminal Fst					fst;
non terminal Snd					snd;
non terminal UnaryCons				unary_cons;
non terminal IsEmpty				is_empty;
non terminal Hd						hd;
non terminal Tl						tl;
non terminal EmptyList				empty_list;
non terminal Projection				projection;
non terminal Tuple					tuple;
non terminal List					list;
non terminal MultiLambda			multi_lambda;
non terminal MultiLet				multi_let;

/* Type non terminals */
non terminal MonoType				type;
non terminal MonoType				simple_type;
non terminal BooleanType			boolean_type;
non terminal IntegerType			integer_type;
non terminal UnitType				unit_type;
non terminal TypeVariable			type_variable;
non terminal ArrowType				arrow_type;
non terminal TupleType				tuple_type;
non terminal ListType				list_type;
non terminal TypeName				type_name;
non terminal RecType				rec_type;

/* Helper non terminals */
non terminal IdTypePair[]			curried_let_list;
non terminal IdTypePair				curried_let_pair;
non terminal IdTypePair[]			curried_let_rec_list;
non terminal IdTypePair				curried_let_rec_pair;
non terminal Expression[]			tuple_list;
non terminal Expression[]			list_list;
non terminal Identifier[]			multi_lambda_list;
non terminal Identifier[]			multi_let_list;
non terminal MonoType[]				tuple_type_list;

/* Error non terminals */
non terminal 		and_error;
non terminal 		or_error;
non terminal 		condition_error_1;
non terminal 		condition_error_2;
non terminal 		condition_error_3;
non terminal 		condition_error_4;
non terminal 		condition_error_5;
non terminal 		let_error_1;
non terminal 		let_error_2;
non terminal 		let_error_3;
non terminal 		recursion_error;
non terminal 		let_rec_error_1;
non terminal 		let_rec_error_2;
non terminal 		let_rec_error_3;
non terminal 		curried_let_error_1;
non terminal 		curried_let_error_2;
non terminal 		curried_let_error_3;
non terminal 		curried_let_pair_error;
non terminal 		curried_let_rec_error_1;
non terminal 		curried_let_rec_error_2;
non terminal 		curried_let_rec_error_3;
non terminal 		curried_let_rec_pair_error;
non terminal 		lambda_error;
non terminal 		multi_let_error_1;
non terminal 		multi_let_error_2;
non terminal 		multi_let_error_3;
non terminal 		multi_let_list_error;
non terminal 		multi_lambda_error;
non terminal 		multi_lambda_list_error;
non terminal 		simple_expr_error_1;
non terminal 		simple_expr_error_2;
non terminal 		infix_operation_error;
non terminal 		simple_type_error;
non terminal 		arrow_type_error;
non terminal		tuple_type_list_error;
non terminal		tuple_error;
non terminal		tuple_list_error;
non terminal		list_error;
non terminal		list_list_error;
non terminal		rec_type_error;

/* Precedences, based on http://caml.inria.fr/pub/docs/manual-ocaml/manual015.html */
precedence nonassoc	IN;
precedence nonassoc	LET, REC;				/* above SEMI (...; let ... in ...) */
precedence nonassoc	THEN;					/* below ELSE (if ... then ...) */
precedence nonassoc	ELSE;					/* (if ... then ... else ...) */
precedence right	ARROW;
precedence right	BARBAR;					/* expr (e || e || e) */
precedence right	AMPERAMPER;				/* expr (e && e && e) */
precedence left		EQUAL, LESS, GREATER, LESSEQUAL, GREATEREQUAL;
precedence right	COLONCOLON;				/* expr (e :: e :: e) */
precedence left		PLUS, MINUS;
precedence left		STAR, SLASH, MOD;


/***************
 * Expressions *
 ***************/


expr							::=	simple_expr:e
									{: RESULT = e; :}
								|   application:a
									{: RESULT = a; :}
								|   infix_operation:i
									{: RESULT = i; :}
								|	and:a
									{: RESULT = a; :}
								|	or:o
									{: RESULT = o; :}
								|	condition:c
									{: RESULT = c; :}
								|	lambda:l
									{: RESULT = l; :}
								|	let:l
									{: RESULT = l; :}
								|	curried_let:c
									{: RESULT = c; :}
								|	recursion:r
									{: RESULT = r; :}
								|	let_rec:l
									{: RESULT = l; :}
								|   curried_let_rec:c
									{: RESULT = c; :}
								|	multi_lambda:m
									{: RESULT = m; :}
								|	multi_let:m
									{: RESULT = m; :}
								;

identifier						::= IDENTIFIER:id
									{: RESULT = new Identifier (id,idleft,idright); :}
								;

application						::= simple_expr:e simple_expr_list:l
									{:
									   for (int n = 0; n < l.length; ++n) 
						  			   {
						    			 e = new Application(e, l[n],
						      			   e.getParserStartOffset ( ) , 
						       				 l[n].getParserEndOffset ( ) );
						   			   }
						   			   RESULT = e; 
						   			:}
								;

infix_operation					::= infix_operation_plus:i
									{: RESULT = i ; :}
								|	infix_operation_minus:i
									{: RESULT = i ; :}
								|	infix_operation_mult:i
									{: RESULT = i ; :}
								|	infix_operation_div:i
									{: RESULT = i ; :}
								|	infix_operation_mod:i
									{: RESULT = i ; :}
								|	infix_operation_equal:i
									{: RESULT = i ; :}
								|	infix_operation_less:i
									{: RESULT = i ; :}
								|	infix_operation_greater:i
									{: RESULT = i ; :}
								|	infix_operation_less_equal:i
									{: RESULT = i ; :}
								|	infix_operation_greater_equal:i
									{: RESULT = i ; :}
								|	infix_operation_binary_cons:i
									{: RESULT = i ; :}
								;

infix_operation_plus			::= expr:e1 PLUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newPlus(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr PLUS infix_operation_error
									{: :}
								;
						
infix_operation_minus			::=	expr:e1 MINUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMinus(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr MINUS infix_operation_error
									{: :}
								;
						
infix_operation_mult			::=	expr:e1 STAR:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMult(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr STAR infix_operation_error
									{: :}
								;
						
infix_operation_div				::=	expr:e1 SLASH:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newDiv(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr SLASH infix_operation_error
									{: :}
								;
						
infix_operation_mod				::=	expr:e1 MOD:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMod(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr MOD infix_operation_error
									{: :}
								;
						
infix_operation_equal			::=	expr:e1 EQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newEquals(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr EQUAL infix_operation_error
									{: :}
								;
						
infix_operation_less			::=	expr:e1 LESS:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr LESS infix_operation_error
									{: :}
								;
						
infix_operation_greater			::=	expr:e1 GREATER:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr GREATER infix_operation_error
									{: :}
								;
						
infix_operation_less_equal		::=	expr:e1 LESSEQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr LESSEQUAL infix_operation_error
									{: :}
								;

infix_operation_greater_equal	::=	expr:e1 GREATEREQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr GREATEREQUAL infix_operation_error
									{: :}
								;

infix_operation_binary_cons		::=	expr:e1 COLONCOLON:op expr:e2
									{: RESULT = new InfixOperation(new BinaryCons(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr COLONCOLON infix_operation_error
									{: :}
								;

infix_operation_error			::=/* epsilon */
									{: Error.expect("Infix-Operation", "e<sub>2</sub>" ); :}
								;

and								::= expr:e1 AMPERAMPER expr:e2
									{: RESULT = new And(e1, e2,e1left,e2right); :}
								|	expr AMPERAMPER and_error
									{: :}
								;

and_error						::= /* epsilon */
									{: Error.expect("And", "e<sub>2</sub>" ); :}
								;

or								::= expr:e1 BARBAR expr:e2
									{: RESULT = new Or(e1, e2, e1left, e2right); :}
								|	expr BARBAR or_error
									{: :}
								;

or_error						::= /* epsilon */
									{: Error.expect("Or", "e<sub>2</sub>" ); :}
								;

condition						::= IF:i expr:e0 THEN expr:e1 ELSE expr:e2
									{: RESULT = new Condition(e0, e1, e2, ileft, e2right); :}
								|	IF condition_error_1
									{: :}
								;

condition_error_1				::= /* epsilon */
									{: Error.expect("Condition", "e<sub>0</sub> then e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	expr condition_error_2
									{: :}
								;

condition_error_2				::= /* epsilon */
									{: Error.expect("Condition", "then e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	THEN condition_error_3
									{: :}
								;

condition_error_3				::= /* epsilon */
									{: Error.expect("Condition", "e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	expr condition_error_4
									{: :}
								;

condition_error_4				::= /* epsilon */
									{: Error.expect("Condition", "else e<sub>2</sub>" ); :}
								|	ELSE condition_error_5
									{: :}
								;

condition_error_5				::= /* epsilon */
									{: Error.expect("Condition", "e<sub>2</sub>" ); :}
								;

lambda							::= LAMBDA:l IDENTIFIER:id DOT expr:e
									{: RESULT = new Lambda(new Identifier (id,idleft,idright), null, e, lleft, eright); :}
								|	LAMBDA:l IDENTIFIER:id COLON type:tau DOT expr:e
									{: RESULT = new Lambda(new Identifier (id,idleft,idright), tau, e, lleft, eright); :}
								|	LAMBDA lambda_error
									{: :}
								;

lambda_error					::= /* epsilon */
									{: Error.expect("Lambda", "id.e", "id: \u03C4.e" ); :}
								|	IDENTIFIER
									{: Error.expect("Lambda", ".e", ": \u03C4.e" ); :}
								|	IDENTIFIER DOT
									{: Error.expect("Lambda", "e" ); :}
								|	IDENTIFIER COLON
									{: Error.expect("Lambda", "\u03C4.e" ); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Lambda", ".e" ); :}
								|	IDENTIFIER COLON type DOT
									{: Error.expect("Lambda", "e" ); :}
								;

let								::= LET:l IDENTIFIER:id EQUAL expr:e1 IN expr:e2
									{: RESULT = new Let(new Identifier (id,idleft,idright), null, e1, e2, lleft, e2right); :}
								|	LET:l IDENTIFIER:id COLON type:tau EQUAL expr:e1 IN expr:e2
									{: RESULT = new Let(new Identifier (id,idleft,idright), tau, e1, e2, lleft, e2right); :}
								|	LET let_error_1
									{: :}
								;

let_error_1						::= /* epsilon */
									{: Error.expect("Let", "id = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	IDENTIFIER
									{: Error.expect("Let", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON type EQUAL let_error_2
									{: :}
								|	IDENTIFIER COLON type
									{: Error.expect("Let", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON
									{: Error.expect("Let", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER EQUAL let_error_2
									{: :}
								;

let_error_2						::= /* epsilon */
									{: Error.expect("Let", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Let", "in e<sub>2</sub>" ); :}
								|	expr IN let_error_3
									{: :}
								;

let_error_3						::= /* epsilon */
									{: Error.expect("Let", "e<sub>2</sub>" ); :}
								;

curried_let						::= LET:l IDENTIFIER:id curried_let_list:itl EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET:l IDENTIFIER:id curried_let_list:itl COLON type:tau EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   types[0] = tau;
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET IDENTIFIER curried_let_list curried_let_error_1
									{: :}
								;

curried_let_error_1				::= /* epsilon */
									{: Error.expect("Curried-Let", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	COLON type EQUAL curried_let_error_2
									{: :}
								|	COLON type
									{: Error.expect("Curried-Let", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	COLON
									{: Error.expect("Curried-Let", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	EQUAL curried_let_error_2
									{: :}
								;

curried_let_error_2				::= /* epsilon */
									{: Error.expect("Curried-Let", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Curried-Let", "in e<sub>2</sub>" ); :}
								|	expr IN curried_let_error_3
									{: :}
								;

curried_let_error_3				::= /* epsilon */
									{: Error.expect("Curried-Let", "e<sub>2</sub>" ); :}
								;

curried_let_list				::= curried_let_list:l curried_let_pair:p
									{: 
									   RESULT = new IdTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = p;
									:}
								|	curried_let_pair:p
									{: RESULT = new IdTypePair[] { p }; :}
								;

curried_let_pair				::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), null); :}
								|	LPAREN curried_let_pair_error
									{: :}
								;

curried_let_pair_error			::= /* epsilon */
									{: Error.expect("Curried-Let", "id: \u03C4) = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER
									{: Error.expect("Curried-Let", ": \u03C4) = e<sub>1</sub> in e<sub>2</sub>", ": \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON
									{: Error.expect("Curried-Let", "\u03C4) = e<sub>1</sub> in e<sub>2</sub>", "\u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Curried-Let", ") = e<sub>1</sub> in e<sub>2</sub>", "): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								;

recursion						::= REC:r IDENTIFIER:id DOT expr:e
									{: RESULT = new Recursion(new Identifier (id,idleft,idright), null, e, rleft, eright); :}
								|	REC:r IDENTIFIER:id COLON type:tau DOT expr:e
									{: RESULT = new Recursion(new Identifier (id,idleft,idright), tau, e, rleft, eright); :}
								|	REC recursion_error
									{: :}					
								;

recursion_error					::= /* epsilon */
									{: Error.expect("Recursion", "id.e", "id: \u03C4.e" ); :}
								|	IDENTIFIER
									{: Error.expect("Recursion", ".e", ": \u03C4.e" ); :}
								|	IDENTIFIER DOT
									{: Error.expect("Recursion", "e" ); :}
								|	IDENTIFIER COLON
									{: Error.expect("Recursion", "\u03C4.e" ); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Recursion", ".e" ); :}
								|	IDENTIFIER COLON type DOT
									{: Error.expect("Recursion", "e" ); :}
								;

let_rec							::= LET:l REC IDENTIFIER:id EQUAL expr:e1 IN expr:e2
									{: RESULT = new LetRec(new Identifier (id,idleft,idright), null, e1, e2, lleft, e2right); :}
								|	LET:l REC IDENTIFIER:id COLON type:tau EQUAL expr:e1 IN expr:e2
									{: RESULT = new LetRec(new Identifier (id,idleft,idright), tau, e1, e2, lleft, e2right); :}
								|	LET REC let_rec_error_1
									{: :}				
								;

let_rec_error_1					::= /* epsilon */
									{: Error.expect("Let-Rec", "id = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	IDENTIFIER
									{: Error.expect("Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON type EQUAL let_rec_error_2
									{: :}
								|	IDENTIFIER COLON type
									{: Error.expect("Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON
									{: Error.expect("Let-Rec", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER EQUAL let_rec_error_2
									{: :}
								;

let_rec_error_2					::= /* epsilon */
									{: Error.expect("Let-Rec", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Let-Rec", "in e<sub>2</sub>" ); :}
								|	expr IN let_rec_error_3
									{: :}
								;

let_rec_error_3					::= /* epsilon */
									{: Error.expect("Let-Rec", "e<sub>2</sub>" ); :}
								;

curried_let_rec					::=	LET:l REC IDENTIFIER:id curried_let_rec_list:itl EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   RESULT = new CurriedLetRec(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET:l REC IDENTIFIER:id curried_let_rec_list:itl COLON type:tau EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   types[0] = tau;
									   RESULT = new CurriedLetRec(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET REC IDENTIFIER curried_let_rec_list curried_let_rec_error_1
									{: :}
								;

curried_let_rec_error_1			::= /* epsilon */
									{: Error.expect("Curried-Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	COLON type EQUAL curried_let_rec_error_2
									{: :}
								|	COLON type
									{: Error.expect("Curried-Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	COLON
									{: Error.expect("Curried-Let-Rec", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	EQUAL curried_let_rec_error_2
									{: :}
								;

curried_let_rec_error_2			::= /* epsilon */
									{: Error.expect("Curried-Let-Rec", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Curried-Let-Rec", "in e<sub>2</sub>" ); :}
								|	expr IN curried_let_rec_error_3
									{: :}
								;

curried_let_rec_error_3			::= /* epsilon */
									{: Error.expect("Curried-Let-Rec", "e<sub>2</sub>" ); :}
								;

curried_let_rec_list			::= curried_let_rec_list:l curried_let_rec_pair:p
									{: 
									   RESULT = new IdTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = p;
									:}
								|	curried_let_rec_pair:p
									{: RESULT = new IdTypePair[] { p }; :}
								;

curried_let_rec_pair			::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), null); :}
								|	LPAREN curried_let_rec_pair_error
									{: :}
								;

curried_let_rec_pair_error		::= /* epsilon */
									{: Error.expect("Curried-Let-Rec", "id: \u03C4) = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER
									{: Error.expect("Curried-Let-Rec", ": \u03C4) = e<sub>1</sub> in e<sub>2</sub>", ": \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON
									{: Error.expect("Curried-Let-Rec", "\u03C4) = e<sub>1</sub> in e<sub>2</sub>", "\u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Curried-Let-Rec", ") = e<sub>1</sub> in e<sub>2</sub>", "): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								;

multi_lambda					::= LAMBDA:l LPAREN multi_lambda_list:il RPAREN DOT expr:e
									{: RESULT = new MultiLambda(il, null, e, lleft, eright); :}
								|	LAMBDA:l LPAREN multi_lambda_list:il RPAREN COLON type:tau DOT expr:e
									{: RESULT = new MultiLambda(il, tau, e, lleft, eright); :}
								|	LAMBDA LPAREN multi_lambda_error
									{: :}
								;

multi_lambda_error					::= /* epsilon */
									{: Error.expect("Multi-Lambda", "id<sub>1</sub>, ... ,id<sub>n</sub>).e", "id<sub>1</sub>, ... ,id<sub>n</sub>): \u03C4.e" ); :}
								|	multi_lambda_list
									{: Error.expect("Multi-Lambda", ").e", "): \u03C4.e" ); :}
								|	multi_lambda_list RPAREN
									{: Error.expect("Multi-Lambda", ".e", ": \u03C4.e" ); :}
								|	multi_lambda_list RPAREN DOT
									{: Error.expect("Multi-Lambda", "e" ); :}
								|	multi_lambda_list RPAREN COLON
									{: Error.expect("Multi-Lambda", "\u03C4.e" ); :}
								|	multi_lambda_list RPAREN COLON type
									{: Error.expect("Multi-Lambda", ".e" ); :}
								|	multi_lambda_list RPAREN COLON type DOT
									{: Error.expect("Multi-Lambda", "e" ); :}
								;

multi_lambda_list				::=	multi_lambda_list:l COMMA IDENTIFIER:id
									{:
									   RESULT = new Identifier[l.length + 1];
						   			   System.arraycopy(l, 0, RESULT, 0, l.length);
						   			   RESULT[l.length] = new Identifier(id,idleft,idright);
						   			:}
						   		|	multi_lambda_list COMMA multi_lambda_list_error
						   			{: :}
								|	IDENTIFIER:id
									{: RESULT = new Identifier[] { new Identifier(id,idleft,idright) }; :}
								;

multi_lambda_list_error			::=	/* epsilon */
									{: Error.expect("Multi-Lambda", "id<sub>i</sub>, ... ,id<sub>n</sub>).e", "id<sub>i</sub>, ... ,id<sub>n</sub>): \u03C4.e"); :}
								;

multi_let						::= LET:l LPAREN multi_let_list:il RPAREN EQUAL expr:e1 IN expr:e2
									{: RESULT = new MultiLet(il, null, e1, e2, lleft, e2right); :}
								|	LET:l LPAREN multi_let_list:il RPAREN COLON type:tau EQUAL expr:e1 IN expr:e2
									{: RESULT = new MultiLet(il, tau, e1, e2, lleft, e2right); :}
								|	LET LPAREN multi_let_list multi_let_error_1
									{: :}
								;

multi_let_error_1				::= /* epsilon */
									{: Error.expect("Multi-Let", ") = e<sub>1</sub> in e<sub>2</sub>", "): \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	RPAREN
									{: Error.expect("Multi-Let", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	RPAREN COLON type EQUAL multi_let_error_2
									{: :}
								|	RPAREN COLON type
									{: Error.expect("Multi-Let", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	RPAREN COLON
									{: Error.expect("Multi-Let", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	RPAREN EQUAL multi_let_error_2
									{: :}
								;

multi_let_error_2				::= /* epsilon */
									{: Error.expect("Multi-Let", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Multi-Let", "in e<sub>2</sub>" ); :}
								|	expr IN multi_let_error_3
									{: :}
								;

multi_let_error_3				::= /* epsilon */
									{: Error.expect("Multi-Let", "e<sub>2</sub>" ); :}
								;

multi_let_list					::=	multi_let_list:l COMMA IDENTIFIER:id
									{:
									   RESULT = new Identifier[l.length + 1];
						   			   System.arraycopy(l, 0, RESULT, 0, l.length);
						   			   RESULT[l.length] = new Identifier(id,idleft,idright);
						   			:}
						   		|	multi_let_list COMMA multi_let_list_error
						   			{: :}
								|	IDENTIFIER:id
									{: RESULT = new Identifier[] { new Identifier(id,idleft,idright) }; :}
								;

multi_let_list_error			::=	/* epsilon */
									{: Error.expect("Multi-Let", "id<sub>i</sub>, ... ,id<sub>n</sub>) = e<sub>1</sub> in e<sub>2</sub>", "id<sub>i</sub>, ... ,id<sub>n</sub>): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								;

constant						::=	unit_constant:u
									{: RESULT = u; :}
								|	boolean_constant:b
									{: RESULT = b; :}
								|	integer_constant:i
									{: RESULT = i; :}
								|	not:n
									{: RESULT = n; :}
								|	fst:f
									{: RESULT = f; :}
								|	snd:s
									{: RESULT = s; :}
								|	unary_cons:u
									{: RESULT = u; :}
								|	is_empty:i
									{: RESULT = i; :}
								|	hd:h
									{: RESULT = h; :}
								|	tl:t
									{: RESULT = t; :}
								|	empty_list:e
									{: RESULT = e; :}
								|	projection:p
									{: RESULT = p; :}
								;

unit_constant					::= PARENPAREN:u
									{: RESULT = new UnitConstant(uleft, uright); :}
								;

boolean_constant				::= TRUE:t
									{: RESULT = new BooleanConstant(true, tleft, tright); :}
								|	FALSE:f
									{: RESULT = new BooleanConstant(false, fleft, fright); :}
								;

integer_constant				::= NUMBER:n
									{: RESULT = new IntegerConstant(n.intValue(), nleft, nright); :}
								;

not								::= NOT:n
									{: RESULT = new Not(nleft, nright); :}
								;

fst								::= FST:f
									{: RESULT = new Fst(fleft, fright); :}
								;

snd								::= SND:s
									{: RESULT = new Snd(sleft, sright); :}
								;

unary_cons						::= CONS:c
									{: RESULT = new UnaryCons(cleft, cright); :}
								;

is_empty						::= IS_EMPTY:i
									{: RESULT = new IsEmpty(ileft, iright); :}
								;

hd								::= HD:h
									{: RESULT = new Hd(hleft, hright); :}
								;

tl								::= TL:t
									{: RESULT = new Tl(tleft, tright); :}
								;

empty_list						::=	BRACKETBRACKET:b
								    {: RESULT = new EmptyList(bleft, bright); :}
								;

projection						::=	PROJECTION:p
									{: RESULT = new Projection(p[0], p[1], p[2], p[3], p[4], p[5], pleft, pright); :}
								;

operator						::=	arithmetic_operator:a
									{: RESULT = a; :}
								|	relational_operator:r
									{: RESULT = r; :}
								|	binary_cons:b
									{: RESULT = b; :}
								;

arithmetic_operator				::= PLUS:op		
									{: RESULT = ArithmeticOperator.newPlus(opleft, opright); :}
								|	MINUS:op		
									{: RESULT = ArithmeticOperator.newMinus(opleft, opright); :}
								|	STAR:op			
									{: RESULT = ArithmeticOperator.newMult(opleft, opright); :}
								|	SLASH:op			
									{: RESULT = ArithmeticOperator.newDiv(opleft, opright); :}
								|	MOD:op			
									{: RESULT = ArithmeticOperator.newMod(opleft, opright); :}
								;

relational_operator				::= EQUAL:op			
									{: RESULT = RelationalOperator.newEquals(opleft, opright); :}
								|	LESS:op			
									{: RESULT = RelationalOperator.newLowerThan(opleft, opright); :}
								|	GREATER:op		
									{: RESULT = RelationalOperator.newGreaterThan(opleft, opright); :}
								|	LESSEQUAL:op		
									{: RESULT = RelationalOperator.newLowerEqual(opleft, opright); :}
								|	GREATEREQUAL:op
									{: RESULT = RelationalOperator.newGreaterEqual(opleft, opright); :}
								;

binary_cons						::=	COLONCOLON:op
					    			{: RESULT = new BinaryCons(opleft, opright); :}
					    		;

tuple							::=	LPAREN:l tuple_list:e RPAREN:r
									{: RESULT = new Tuple(e, lleft, rright); :}
								|	LPAREN tuple_list tuple_error
									{: :}
								;

tuple_error						::= /* epsilon */
									{: Error.expect("Tuple", ")"); :}
								;

tuple_list						::=	tuple_list:el COMMA expr:e
									{:
									   RESULT = new Expression[el.length + 1];
						   			   System.arraycopy(el, 0, RESULT, 0, el.length);
						   			   RESULT[el.length] = e;
						   			:}
								|	expr:e1 COMMA expr:e2
									{: RESULT = new Expression[] { e1, e2 }; :}
								|	tuple_list COMMA tuple_list_error
									{: :}
								|	expr COMMA tuple_list_error
									{: :}
								;

tuple_list_error				::=	/* epsilon */
									{: Error.expect("Tuple", "e<sub>i</sub>, ... ,e<sub>n</sub>)"); :}
								;

list							::=	LBRACKET:l list_list:e RBRACKET:r
									{: RESULT = new List(e, lleft, rright); :}
								|	LBRACKET list_list list_error
									{: :}
								;

list_error						::= /* epsilon */
									{: Error.expect("List", "]"); :}
								;

list_list						::=	expr:e
									{: RESULT = new Expression[] { e }; :}
								|	list_list:el SEMI expr:e
									{:
									   RESULT = new Expression[el.length + 1];
									   System.arraycopy(el, 0, RESULT, 0, el.length);
						   			   RESULT[el.length] = e;
						   			:}
						   		|	list_list SEMI list_list_error
						   			{: :}
								;

list_list_error					::=	/* epsilon */
									{: Error.expect("List", "e<sub>i</sub>; ... ;e<sub>n</sub>]"); :}
								;

simple_expr						::=	constant:c
									{: RESULT = c; :}
								|	identifier:id
									{: RESULT = id; :}
								|	LPAREN operator:o RPAREN
									{: RESULT = o; :}
								|	LPAREN operator simple_expr_error_1
									{: :}
								|	LPAREN expr:e RPAREN
									{: RESULT = e; :}
								|	LPAREN expr simple_expr_error_1
									{: :}
								|	tuple:t
									{: RESULT = t; :}									
								|	list:l
									{: RESULT = l; :}
								|	LPAREN simple_expr_error_2
									{: :}							
								;

simple_expr_error_1				::= /* epsilon */
									{: Error.expect("Expression", ")"); :}
								;

simple_expr_error_2				::= /* epsilon */
									{: Error.expect("Expression", "... )"); :}
								;

simple_expr_list				::=	simple_expr:e
									{: RESULT = new Expression[] { e }; :}
								|	simple_expr_list:l simple_expr:e
									{:
									   RESULT = new Expression[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = e;
									:}
								;


/*********
 * Types *
 *********/


type							::=	simple_type:t
									{: RESULT = t; :}
								|	arrow_type:a
									{: RESULT = a; :}
								|	tuple_type:t
									{: RESULT = t; :}
								|	list_type:l
									{: RESULT = l; :}
								;

simple_type						::=	LPAREN:l type:t RPAREN:r
									{: RESULT = t; :}
								|	LPAREN type simple_type_error
									{: :}
								|	boolean_type:b
									{: RESULT = b; :}
								|	integer_type:i
									{: RESULT = i; :}
								|	unit_type:u
									{: RESULT = u; :}
								|	type_variable:t
									{: RESULT = t; :}
								|	type_name:t
									{: RESULT = t; :}
								|	rec_type:r
									{: RESULT = r; :}
								;

simple_type_error				::= /* epsilon */
									{: Error.expect("Type", ")"); :}
								;

arrow_type						::= type:t1 ARROW type:t2
									{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
								|	type ARROW arrow_type_error
									{: :}
								;

arrow_type_error				::= /* epsilon */
									{: Error.expect("Arrow-Type", "\u03C4<sub>2</sub>"); :}
								;

boolean_type					::= BOOL:b
									{: RESULT = new BooleanType(bleft, bright); :}
								;

integer_type					::= INT:i
									{: RESULT = new IntegerType(ileft, iright); :}
								;

unit_type						::= UNIT:u
									{: RESULT = new UnitType(uleft, uright); :}
								;

type_variable					::= TYPEVARIABLE:t
									{: RESULT = new TypeVariable(0, t, tleft, tright); :}
								;

type_name						::= IDENTIFIER:id
									{: RESULT = new TypeName(id, idleft, idright); :}
								;

rec_type						::= MU:m IDENTIFIER:id DOT type:t
									{: RESULT = new RecType(new TypeName(id, idleft, idright), t, mleft, tright); :}
								|	MU rec_type_error
									{: :}								
								;

rec_type_error					::= /* epsilon */
									{: Error.expect("Rec-Type", "t.\u03C4"); :}
								|	IDENTIFIER
									{: Error.expect("Rec-Type", ".\u03C4"); :}
								|	IDENTIFIER DOT
									{: Error.expect("Rec-Type", "\u03C4"); :}
								;

tuple_type						::= tuple_type_list:t
									{: RESULT = new TupleType(t, tleft, tright); :}
								;

list_type						::=	type:t LIST:l
									{: RESULT = new ListType(t, tleft, lright); :}
								;

tuple_type_list					::= tuple_type_list:tl STAR type:t
									{:
									   RESULT = new MonoType[tl.length + 1];
									   System.arraycopy(tl, 0, RESULT, 0, tl.length);
									   RESULT[tl.length] = t;
									:}
								|	type:t1 STAR type:t2
									{: RESULT = new MonoType[] { t1, t2 }; :}
								|	tuple_type_list STAR tuple_type_list_error
									{: :}
								|	type STAR tuple_type_list_error
									{: :}
								;

tuple_type_list_error			::= /* epsilon */
									{: Error.expect("Tuple-Type", "\u03C4"); :}
								;