import de.unisiegen.tpml.core.types.*;

/* Syntactic tokens */
terminal			ARROW, STAR;
terminal			LPAREN, RPAREN;

/* Types */
terminal			BOOL, INT, UNIT, LIST;

/* Special tokens */
terminal Integer	TYPEVARIABLE;


/* Non-Terminals */
non terminal MonoType		type;
non terminal MonoType		simple_type;
non terminal MonoType[]		type_star_list;		/* list of types separated by star */


/* Precedences, based on http://caml.inria.fr/pub/docs/manual-ocaml/manual015.html */
precedence right	ARROW;

precedence left		STAR;



/*********
 * Types *
 *********/


type				::=	simple_type:t
						{: RESULT = t; :}
					|	type:t1 ARROW type:t2
						{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
					|	type_star_list:tl
						{: RESULT = new TupleType(tl, tlleft, tlright); :}
					|	type:t LIST:l
						{: RESULT = new ListType(t, tleft, lright); :}
					;


simple_type			::=	LPAREN:l type:t RPAREN:r
						{: RESULT = t; :}
					|	BOOL:b
						{: RESULT = new BooleanType(bleft, bright); :}
					|	INT:i
						{: RESULT = new IntegerType(ileft, iright); :}
					|	UNIT:u
						{: RESULT = new UnitType(uleft, uright); :}
					|	TYPEVARIABLE:tvar
						{: RESULT = new TypeVariable(0, tvar, tvarleft, tvarright); :}
					;


type_star_list		::= type_star_list:tl STAR type:t
						{: RESULT = new MonoType[tl.length + 1];
						   System.arraycopy(tl, 0, RESULT, 0, tl.length);
						   RESULT[tl.length] = t; :}
					|	type:t1 STAR type:t2
						{: RESULT = new MonoType[] { t1, t2 }; :}
					;