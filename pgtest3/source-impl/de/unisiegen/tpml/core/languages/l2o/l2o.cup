import de.unisiegen.tpml.core.expressions.*;
import de.unisiegen.tpml.core.types.*;
import de.unisiegen.tpml.core.exceptions.LanguageParserMultiException;
import de.unisiegen.tpml.core.languages.LanguageParserException;
import de.unisiegen.tpml.core.Messages ;
import java.text.MessageFormat;
import java.util.ArrayList;


/* Helper classes */
action code 
{:
  private static class IdTypePair 
  {
    Identifier id;
    MonoType type;
    
    public IdTypePair(Identifier pId, MonoType pType) 
    { 
      this.id = pId;
      this.type = pType; 
    }
  }
  
  private static class IdExprPair 
  {
    Identifier id;
    Expression expression;
    
    public IdExprPair(Identifier pId, Expression pExpression)
    { 
      this.id = pId; 
      this.expression = pExpression;
    }
  }
 
  private static class Error
  {
    public static void expect(String pSymbol, String ... pTokenSequence)
    {
      expect (0, 0, pSymbol, pTokenSequence);
    }
    
    public static void expect(int pLeft, int pRight, String pSymbol, String ... pTokenSequence)
    {
      String or = Messages.getString ( "Parser.15" ) ;
      String result = "" ;
      for ( int i = 0; i < pTokenSequence.length ; i++)
      {
        if ( i == 0 )
        {
          result += "\"" + pTokenSequence [i] + "\"" ;
        }
        else if ( i == pTokenSequence.length - 1 )
        {
          result += " " + or + " \"" + pTokenSequence [i]+ "\"";
        }
        else
        {
          result += ", \"" + pTokenSequence [i]+ "\"";
        }
      }
      throw new LanguageParserException (  
        MessageFormat.format ( "<html>" + Messages.getString ( "Parser.14" ) + "</html>", 
          result, pSymbol), pLeft, pRight);
    }
  }
  
  private static class Duplicated
  {
    public static void check(Row pRow)
    {
	  ArrayList <Identifier> negativeIdentifiers = new ArrayList <Identifier> ();
	  Expression [ ] rowExpressions = pRow.getExpressions ( ) ;
      for ( int i = 0 ; i < rowExpressions.length ; i ++ )
      {
        if ( rowExpressions[i] instanceof Attribute )
        {
          negativeIdentifiers.clear();
          Attribute attribute1 = (Attribute) rowExpressions[i] ;
          for ( int j = i+1 ; j < rowExpressions.length ; j++ )
          {
            if ( rowExpressions[j] instanceof Attribute )
    	    {
    	      Attribute attribute2 = (Attribute) rowExpressions[j] ;
    	      if ( attribute1.getId().equals(attribute2.getId()))
    	      {
    	        negativeIdentifiers.add(attribute2.getId());
    	      }
    	    }
    	  }
    	  negativeIdentifiers.add ( attribute1.getId() ) ;
    	  LanguageParserMultiException.throwExceptionRow ( negativeIdentifiers ) ;
        }
      }
    }
    
    
    public static void check(Duplication pDuplication)
    {
	  ArrayList <Identifier> negativeIdentifiers = new ArrayList <Identifier> ();
	  Identifier [] identifier = pDuplication.getIdentifiers() ;
      for ( int i = 0 ; i < identifier.length ; i ++ )
      {
        negativeIdentifiers.clear();
        for ( int j = i+1 ; j < identifier.length ; j++ )
        {
          if ( identifier [i].equals(identifier[j]) )
    	  {
  	        negativeIdentifiers.add(identifier[j]);
    	  }
    	}
    	negativeIdentifiers.add ( identifier [i] ) ;
    	LanguageParserMultiException.throwExceptionDuplication ( negativeIdentifiers ) ;
      }
    }
    
    
    public static void check(RowType pRowType)
    {
	  ArrayList <Identifier> negativeIdentifiers = new ArrayList <Identifier> ();
	  Identifier [] identifier = pRowType.getIdentifiers() ;
      for ( int i = 0 ; i < identifier.length ; i ++ )
      {
        negativeIdentifiers.clear();
        for ( int j = i+1 ; j < identifier.length ; j++ )
        {
          if ( identifier [i].equals(identifier[j]) )
    	  {
  	        negativeIdentifiers.add(identifier[j]);
    	  }
    	}
    	negativeIdentifiers.add ( identifier [i] ) ;
    	LanguageParserMultiException.throwExceptionRowType ( negativeIdentifiers ) ;
      }
    }
  }
:}


/* Binary operators */
terminal			PLUS;
terminal			MINUS;
terminal			STAR;
terminal			SLASH;
terminal			MOD;
terminal			EQUAL;
terminal			LESS;
terminal			GREATER;
terminal			LESSEQUAL;
terminal			GREATEREQUAL;

/* Logical operators */
terminal			AMPERAMPER;
terminal			BARBAR;
terminal			NOT;

/* Syntactic tokens */
terminal			ARROW;
terminal			COLON;
terminal			DOT;
terminal			LPAREN;
terminal			RPAREN;
terminal			PARENPAREN;

/* Keywords */
terminal			LAMBDA;
terminal			LET;
terminal			REC;
terminal			IN;
terminal			IF;
terminal			THEN;
terminal			ELSE;
terminal			TRUE;
terminal			FALSE;
terminal			OBJECT ;
terminal			END ;
terminal			HASHKEY ;
terminal			ATTRIBUTE ;
terminal			METHOD ;
terminal			SEMI ;
terminal			DUPLBEGIN ;
terminal			DUPLEND ;

/* Types */
terminal			BOOL;
terminal			INT;
terminal			UNIT;

/* Special tokens */
terminal Integer	NUMBER;
terminal Integer	TYPEVARIABLE;
terminal String		IDENTIFIER;
terminal String		SELF ;
terminal			COMMENT;

/* Expression non terminals */
non terminal Expression				expr;
non terminal Expression				simple_expr;
non terminal Expression[]			simple_expr_list;
non terminal Constant				constant;
non terminal BinaryOperator			operator;
non terminal ArithmeticOperator		arithmetic_operator;
non terminal RelationalOperator		relational_operator;
non terminal Identifier				identifier;
non terminal Expression				application;
non terminal InfixOperation 		infix_operation;
non terminal InfixOperation 		infix_operation_plus;
non terminal InfixOperation 		infix_operation_minus;
non terminal InfixOperation 		infix_operation_mult;
non terminal InfixOperation 		infix_operation_div;
non terminal InfixOperation 		infix_operation_mod;
non terminal InfixOperation 		infix_operation_equal;
non terminal InfixOperation 		infix_operation_less;
non terminal InfixOperation 		infix_operation_greater;
non terminal InfixOperation 		infix_operation_less_equal;
non terminal InfixOperation 		infix_operation_greater_equal;
non terminal And					and;
non terminal Or						or;
non terminal Condition				condition;
non terminal Lambda					lambda;
non terminal Let					let;
non terminal CurriedLet				curried_let;
non terminal Recursion				recursion;
non terminal LetRec					let_rec;
non terminal CurriedLetRec			curried_let_rec;
non terminal ObjectExpr				object_expr;
non terminal Duplication			duplication;
non terminal Send					send;
non terminal Row					row;
non terminal Attribute				attribute;
non terminal Method					method;
non terminal CurriedMethod			curried_method;
non terminal UnitConstant			unit_constant;
non terminal BooleanConstant		boolean_constant;
non terminal IntegerConstant		integer_constant;
non terminal Not					not;

/* Type non terminals */
non terminal MonoType				type;
non terminal MonoType				simple_type;
non terminal BooleanType			boolean_type;
non terminal IntegerType			integer_type;
non terminal UnitType				unit_type;
non terminal TypeVariable			type_variable;
non terminal ArrowType				arrow_type;
non terminal ObjectType				object_type;
non terminal RowType				row_type;

/* Helper non terminals */
non terminal IdTypePair[]			curried_let_list;
non terminal IdTypePair				curried_let_pair;
non terminal IdTypePair[]			curried_let_rec_list;
non terminal IdTypePair				curried_let_rec_pair;
non terminal IdTypePair[]			curried_method_list;
non terminal IdTypePair				curried_method_pair;
non terminal IdExprPair[]			duplication_list;
non terminal IdExprPair				duplication_pair;

/* Error non terminals */
non terminal 		and_error;
non terminal 		or_error;
non terminal 		condition_error_1;
non terminal 		condition_error_2;
non terminal 		condition_error_3;
non terminal 		condition_error_4;
non terminal 		condition_error_5;
non terminal 		let_error_1;
non terminal 		let_error_2;
non terminal 		let_error_3;
non terminal 		recursion_error;
non terminal 		let_rec_error_1;
non terminal 		let_rec_error_2;
non terminal 		let_rec_error_3;
non terminal 		curried_let_error_1;
non terminal 		curried_let_error_2;
non terminal 		curried_let_error_3;
non terminal 		curried_let_pair_error;
non terminal 		curried_let_rec_error_1;
non terminal 		curried_let_rec_error_2;
non terminal 		curried_let_rec_error_3;
non terminal 		curried_let_rec_pair_error;
non terminal 		lambda_error;
non terminal 		simple_expr_error_1;
non terminal 		simple_expr_error_2;
non terminal 		infix_operation_error;
non terminal 		object_expr_error;
non terminal 		attribute_error_1;
non terminal 		attribute_error_2;
non terminal 		curried_method_error_1;
non terminal 		curried_method_error_2;
non terminal 		curried_method_pair_error;
non terminal 		method_error_1;
non terminal 		method_error_2;
non terminal 		duplication_error;
non terminal 		send_error;
non terminal 		duplication_pair_error_1;
non terminal 		duplication_pair_error_2;
non terminal 		duplication_list_error;
non terminal 		simple_type_error;
non terminal 		arrow_type_error;
non terminal 		object_type_error;
non terminal		row_type_error;

/* Precedences, based on http://caml.inria.fr/pub/docs/manual-ocaml/manual015.html */
precedence right	ARROW;
precedence right	BARBAR;					/* expr (e || e || e) */
precedence right	AMPERAMPER;				/* expr (e && e && e) */
precedence left		EQUAL, LESS, GREATER, LESSEQUAL, GREATEREQUAL;
precedence left		PLUS, MINUS;
precedence left		STAR, SLASH, MOD;


/***************
 * Expressions *
 ***************/


expr							::=	simple_expr:e
									{: RESULT = e; :}
								|	object_expr:o
									{: RESULT = o; :}
								|   duplication:d
									{: RESULT = d; :}
								|   application:a
									{: RESULT = a; :}
								|   infix_operation:i
									{: RESULT = i; :}
								|	and:a
									{: RESULT = a; :}
								|	or:o
									{: RESULT = o; :}
								|	condition:c
									{: RESULT = c; :}
								|	lambda:l
									{: RESULT = l; :}
								|	let:l
									{: RESULT = l; :}
								|	curried_let:c
									{: RESULT = c; :}
								|	recursion:r
									{: RESULT = r; :}
								|	let_rec:l
									{: RESULT = l; :}
								|   curried_let_rec:c
									{: RESULT = c; :}
								;

identifier						::= IDENTIFIER:id
									{: RESULT = new Identifier (id,idleft,idright); :}
								|	SELF:s
									{: RESULT = new Identifier (s,sleft,sright); :}
								;

application						::= simple_expr:e simple_expr_list:l
									{:
									   for (int n = 0; n < l.length; ++n) 
						  			   {
						    			 e = new Application(e, l[n],
						      			   e.getParserStartOffset ( ) , 
						       				 l[n].getParserEndOffset ( ) );
						   			   }
						   			   RESULT = e; 
						   			:}
								;

infix_operation					::= infix_operation_plus:i
									{: RESULT = i ; :}
								|	infix_operation_minus:i
									{: RESULT = i ; :}
								|	infix_operation_mult:i
									{: RESULT = i ; :}
								|	infix_operation_div:i
									{: RESULT = i ; :}
								|	infix_operation_mod:i
									{: RESULT = i ; :}
								|	infix_operation_equal:i
									{: RESULT = i ; :}
								|	infix_operation_less:i
									{: RESULT = i ; :}
								|	infix_operation_greater:i
									{: RESULT = i ; :}
								|	infix_operation_less_equal:i
									{: RESULT = i ; :}
								|	infix_operation_greater_equal:i
									{: RESULT = i ; :}
								;

infix_operation_plus			::= expr:e1 PLUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newPlus(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr PLUS infix_operation_error
									{: :}
								;
						
infix_operation_minus			::=	expr:e1 MINUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMinus(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr MINUS infix_operation_error
									{: :}
								;
						
infix_operation_mult			::=	expr:e1 STAR:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMult(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr STAR infix_operation_error
									{: :}
								;
						
infix_operation_div				::=	expr:e1 SLASH:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newDiv(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr SLASH infix_operation_error
									{: :}
								;
						
infix_operation_mod				::=	expr:e1 MOD:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMod(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr MOD infix_operation_error
									{: :}
								;
						
infix_operation_equal			::=	expr:e1 EQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newEquals(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr EQUAL infix_operation_error
									{: :}
								;
						
infix_operation_less			::=	expr:e1 LESS:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr LESS infix_operation_error
									{: :}
								;
						
infix_operation_greater			::=	expr:e1 GREATER:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr GREATER infix_operation_error
									{: :}
								;
						
infix_operation_less_equal		::=	expr:e1 LESSEQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr LESSEQUAL infix_operation_error
									{: :}
								;

infix_operation_greater_equal	::=	expr:e1 GREATEREQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	expr GREATEREQUAL infix_operation_error
									{: :}
								;

infix_operation_error			::=/* epsilon */
									{: Error.expect("Infix-Operation", "e<sub>2</sub>" ); :}
								;

and								::= expr:e1 AMPERAMPER expr:e2
									{: RESULT = new And(e1, e2,e1left,e2right); :}
								|	expr AMPERAMPER and_error
									{: :}
								;

and_error						::= /* epsilon */
									{: Error.expect("And", "e<sub>2</sub>" ); :}
								;

or								::= expr:e1 BARBAR expr:e2
									{: RESULT = new Or(e1, e2, e1left, e2right); :}
								|	expr BARBAR or_error
									{: :}
								;

or_error						::= /* epsilon */
									{: Error.expect("Or", "e<sub>2</sub>" ); :}
								;

condition						::= IF:i expr:e0 THEN expr:e1 ELSE expr:e2
									{: RESULT = new Condition(e0, e1, e2, ileft, e2right); :}
								|	IF condition_error_1
									{: :}
								;

condition_error_1				::= /* epsilon */
									{: Error.expect("Condition", "e<sub>0</sub> then e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	expr condition_error_2
									{: :}
								;

condition_error_2				::= /* epsilon */
									{: Error.expect("Condition", "then e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	THEN condition_error_3
									{: :}
								;

condition_error_3				::= /* epsilon */
									{: Error.expect("Condition", "e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	expr condition_error_4
									{: :}
								;

condition_error_4				::= /* epsilon */
									{: Error.expect("Condition", "else e<sub>2</sub>" ); :}
								|	ELSE condition_error_5
									{: :}
								;

condition_error_5				::= /* epsilon */
									{: Error.expect("Condition", "e<sub>2</sub>" ); :}
								;

lambda							::= LAMBDA:l IDENTIFIER:id DOT expr:e
									{: RESULT = new Lambda(new Identifier (id,idleft,idright), null, e, lleft, eright); :}
								|	LAMBDA:l IDENTIFIER:id COLON type:tau DOT expr:e
									{: RESULT = new Lambda(new Identifier (id,idleft,idright), tau, e, lleft, eright); :}
								|	LAMBDA lambda_error
									{: :}
								;

lambda_error					::= /* epsilon */
									{: Error.expect("Lambda", "id.e", "id: \u03C4.e" ); :}
								|	IDENTIFIER
									{: Error.expect("Lambda", ".e", ": \u03C4.e" ); :}
								|	IDENTIFIER DOT
									{: Error.expect("Lambda", "e" ); :}
								|	IDENTIFIER COLON
									{: Error.expect("Lambda", "\u03C4.e" ); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Lambda", ".e" ); :}
								|	IDENTIFIER COLON type DOT
									{: Error.expect("Lambda", "e" ); :}
								;

let								::= LET:l IDENTIFIER:id EQUAL expr:e1 IN expr:e2
									{: RESULT = new Let(new Identifier (id,idleft,idright), null, e1, e2, lleft, e2right); :}
								|	LET:l IDENTIFIER:id COLON type:tau EQUAL expr:e1 IN expr:e2
									{: RESULT = new Let(new Identifier (id,idleft,idright), tau, e1, e2, lleft, e2right); :}
								|	LET let_error_1
									{: :}
								;

let_error_1						::= /* epsilon */
									{: Error.expect("Let", "id = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	IDENTIFIER
									{: Error.expect("Let", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON type EQUAL let_error_2
									{: :}
								|	IDENTIFIER COLON type
									{: Error.expect("Let", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON
									{: Error.expect("Let", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER EQUAL let_error_2
									{: :}
								;

let_error_2						::= /* epsilon */
									{: Error.expect("Let", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Let", "in e<sub>2</sub>" ); :}
								|	expr IN let_error_3
									{: :}
								;

let_error_3						::= /* epsilon */
									{: Error.expect("Let", "e<sub>2</sub>" ); :}
								;

curried_let						::= LET:l IDENTIFIER:id curried_let_list:itl EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET:l IDENTIFIER:id curried_let_list:itl COLON type:tau EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   types[0] = tau;
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET IDENTIFIER curried_let_list curried_let_error_1
									{: :}
								;

curried_let_error_1				::= /* epsilon */
									{: Error.expect("CurriedLet", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	COLON type EQUAL curried_let_error_2
									{: :}
								|	COLON type
									{: Error.expect("CurriedLet", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	COLON
									{: Error.expect("CurriedLet", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	EQUAL curried_let_error_2
									{: :}
								;

curried_let_error_2				::= /* epsilon */
									{: Error.expect("CurriedLet", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("CurriedLet", "in e<sub>2</sub>" ); :}
								|	expr IN curried_let_error_3
									{: :}
								;

curried_let_error_3				::= /* epsilon */
									{: Error.expect("CurriedLet", "e<sub>2</sub>" ); :}
								;

curried_let_list				::= curried_let_list:l curried_let_pair:p
									{: 
									   RESULT = new IdTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = p;
									:}
								|	curried_let_pair:p
									{: RESULT = new IdTypePair[] { p }; :}
								;

curried_let_pair				::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), null); :}
								|	LPAREN curried_let_pair_error
									{: :}
								;

curried_let_pair_error			::= /* epsilon */
									{: Error.expect("Curried-Let", "id: \u03C4) = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER
									{: Error.expect("Curried-Let", ": \u03C4) = e<sub>1</sub> in e<sub>2</sub>", ": \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON
									{: Error.expect("Curried-Let", "\u03C4) = e<sub>1</sub> in e<sub>2</sub>", "\u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Curried-Let", ") = e<sub>1</sub> in e<sub>2</sub>", "): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								;

recursion						::= REC:r IDENTIFIER:id DOT expr:e
									{: RESULT = new Recursion(new Identifier (id,idleft,idright), null, e, rleft, eright); :}
								|	REC:r IDENTIFIER:id COLON type:tau DOT expr:e
									{: RESULT = new Recursion(new Identifier (id,idleft,idright), tau, e, rleft, eright); :}
								|	REC recursion_error
									{: :}					
								;

recursion_error					::= /* epsilon */
									{: Error.expect("Recursion", "id.e", "id: \u03C4.e" ); :}
								|	IDENTIFIER
									{: Error.expect("Recursion", ".e", ": \u03C4.e" ); :}
								|	IDENTIFIER DOT
									{: Error.expect("Recursion", "e" ); :}
								|	IDENTIFIER COLON
									{: Error.expect("Recursion", "\u03C4.e" ); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Recursion", ".e" ); :}
								|	IDENTIFIER COLON type DOT
									{: Error.expect("Recursion", "e" ); :}
								;

let_rec							::= LET:l REC IDENTIFIER:id EQUAL expr:e1 IN expr:e2
									{: RESULT = new LetRec(new Identifier (id,idleft,idright), null, e1, e2, lleft, e2right); :}
								|	LET:l REC IDENTIFIER:id COLON type:tau EQUAL expr:e1 IN expr:e2
									{: RESULT = new LetRec(new Identifier (id,idleft,idright), tau, e1, e2, lleft, e2right); :}
								|	LET REC let_rec_error_1
									{: :}				
								;

let_rec_error_1					::= /* epsilon */
									{: Error.expect("Let-Rec", "id = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	IDENTIFIER
									{: Error.expect("Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON type EQUAL let_rec_error_2
									{: :}
								|	IDENTIFIER COLON type
									{: Error.expect("Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER COLON
									{: Error.expect("Let-Rec", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	IDENTIFIER EQUAL let_rec_error_2
									{: :}
								;

let_rec_error_2					::= /* epsilon */
									{: Error.expect("Let-Rec", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Let-Rec", "in e<sub>2</sub>" ); :}
								|	expr IN let_rec_error_3
									{: :}
								;

let_rec_error_3					::= /* epsilon */
									{: Error.expect("Let-Rec", "e<sub>2</sub>" ); :}
								;

curried_let_rec					::=	LET:l REC IDENTIFIER:id curried_let_rec_list:itl EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   RESULT = new CurriedLetRec(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET:l REC IDENTIFIER:id curried_let_rec_list:itl COLON type:tau EQUAL expr:e1 IN expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].id;
									     types[n + 1] = itl[n].type;
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   types[0] = tau;
									   RESULT = new CurriedLetRec(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET REC IDENTIFIER curried_let_rec_list curried_let_rec_error_1
									{: :}
								;

curried_let_rec_error_1			::= /* epsilon */
									{: Error.expect("Curried-Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	COLON type EQUAL curried_let_rec_error_2
									{: :}
								|	COLON type
									{: Error.expect("Curried-Let-Rec", "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	COLON
									{: Error.expect("Curried-Let-Rec", "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	EQUAL curried_let_rec_error_2
									{: :}
								;

curried_let_rec_error_2			::= /* epsilon */
									{: Error.expect("Curried-Let-Rec", "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	expr
									{: Error.expect("Curried-Let-Rec", "in e<sub>2</sub>" ); :}
								|	expr IN
									{: Error.expect("Curried-Let-Rec", "e<sub>2</sub>" ); :}
								;

curried_let_rec_list			::= curried_let_rec_list:l curried_let_rec_pair:p
									{: 
									   RESULT = new IdTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = p;
									:}
								|	curried_let_rec_pair:p
									{: RESULT = new IdTypePair[] { p }; :}
								;

curried_let_rec_pair			::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), null); :}
								|	LPAREN curried_let_rec_pair_error
									{: :}
								;

curried_let_rec_pair_error		::= /* epsilon */
									{: Error.expect("Curried-Let-Rec", "id: \u03C4) = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER
									{: Error.expect("Curried-Let-Rec", ": \u03C4) = e<sub>1</sub> in e<sub>2</sub>", ": \u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON
									{: Error.expect("Curried-Let-Rec", "\u03C4) = e<sub>1</sub> in e<sub>2</sub>", "\u03C4): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Curried-Let-Rec", ") = e<sub>1</sub> in e<sub>2</sub>", "): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								;

object_expr						::= OBJECT:o LPAREN SELF:id RPAREN END:end
									{:
									   Expression [] e = new Expression [0];
						  			   RESULT = new ObjectExpr (new Identifier (id,idleft,idright), null, new Row (e), oleft, endright);
						  			:}
								|   OBJECT:o LPAREN SELF:id COLON type:tau RPAREN END:end
									{: 
									   Expression [] e = new Expression [0];
								       RESULT = new ObjectExpr (new Identifier (id,idleft,idright), tau, new Row (e), oleft, endright);
								    :}
								|	OBJECT:o LPAREN SELF:id RPAREN row:r END:end
									{:
									   Duplicated.check(r);
						   			   RESULT = new ObjectExpr (new Identifier (id,idleft,idright), null, r, oleft, endright);
						   			:}
								|	OBJECT:o LPAREN SELF:id COLON type:tau RPAREN row:r END:end
									{:
									   Duplicated.check(r);
						   			   RESULT = new ObjectExpr (new Identifier (id,idleft,idright), tau, r, oleft, endright);
						   			:}
								|	OBJECT object_expr_error
									{: :}
								;

object_expr_error				::= /* epsilon */
									{: Error.expect("Object", "(self) r end", "(self: \u03C4) r end"); :}
								|	LPAREN SELF RPAREN row
									{: Error.expect("Object", "end", "r end"); :}					
								|	LPAREN SELF RPAREN
									{: Error.expect("Object", "r end"); :}
								|	LPAREN SELF COLON type RPAREN row
									{: Error.expect("Object", "end", "r end"); :}		
								|	LPAREN SELF COLON type RPAREN
									{: Error.expect("Object", "r end"); :}				
								|	LPAREN SELF COLON type
									{: Error.expect("Object", ") r end"); :}						
								|	LPAREN SELF COLON
									{: Error.expect("Object", "\u03C4) r end"); :}
								|	LPAREN SELF
									{: Error.expect("Object", ") r end", ": \u03C4) r end"); :}
								|	LPAREN
									{: Error.expect("Object", "self) r end", "self: \u03C4) r end"); :}
								;

duplication						::= DUPLBEGIN:b duplication_list:l DUPLEND:e
									{: 
									   Expression [] tmpE = new Expression [l.length];
									   Identifier [] tmpI = new Identifier [l.length];
									   for ( int i = 0 ; i < l.length ; i++ )
									   {
									     tmpE [i] = l [i].expression;
									     tmpI [i] = l [i].id;
									     tmpI [i].setSet (Identifier.Set.ATTRIBUTE );
									   }
									   Duplication d = new Duplication (tmpI, tmpE, bleft, eright);
									   Duplicated.check(d);
									   RESULT = d;
									:}
								|	DUPLBEGIN:b DUPLEND:e
									{: 
									   Expression [] tmpE = new Expression [0];
									   Identifier [] tmpI = new Identifier [0];
									   RESULT = new Duplication (tmpI, tmpE, bleft, eright);
									:}
								|	DUPLBEGIN duplication_error
									{: :}
								;

duplication_error				::= /* epsilon */
									{: Error.expect("Duplication", "a<sub>1</sub> = e<sub>1</sub>; ... ; a<sub>n</sub> = e<sub>n</sub> >}"); :}
								|	duplication_list
									{: Error.expect("Duplication", ">}"); :}	
								;

duplication_list				::= duplication_list:l SEMI duplication_pair:p
									{: 
									   IdExprPair [] list = new IdExprPair [l.length+1];
									   System.arraycopy(l, 0, list, 0, l.length);
									   list [l.length] = p;
									   RESULT = list;
									:}
								|	duplication_pair:p
									{: 
									   IdExprPair [] list = new IdExprPair [1];
									   list [0] = p;
									   RESULT = list;
									:}
								|	duplication_list SEMI duplication_list_error
									{: :}
								;

duplication_list_error			::= /* epsilon */
									{: Error.expect("Duplication", "... a<sub>n</sub> = e<sub>n</sub> >}"); :}
								;

duplication_pair				::= IDENTIFIER:id EQUAL expr:e
									{: RESULT = new IdExprPair (new Identifier (id,idleft,idright), e); :}
								|	IDENTIFIER duplication_pair_error_1
									{: :}
								;

duplication_pair_error_1		::= /* epsilon */
									{: Error.expect("Duplication", "= e; ... ; a<sub>n</sub> = e<sub>n</sub> >}"); :}
								|	EQUAL duplication_pair_error_2
									{: :}
								;

duplication_pair_error_2		::= /* epsilon */
									{: Error.expect("Duplication", "e; ... ; a<sub>n</sub> = e<sub>n</sub> >}"); :}
								;

send							::= simple_expr:e HASHKEY IDENTIFIER:id
									{:
									   Identifier idM = new Identifier (id,idleft,idright) ;
									   idM.setSet (Identifier.Set.MESSAGE );
									   RESULT = new Send ( e, idM, eleft, idright) ;
									:}
								|	simple_expr:e HASHKEY send_error
									{: :}	
								;

send_error						::= /* epsilon */
									{: Error.expect("Send", "m"); :}	
								;

row								::= attribute:a
									{:
									   Expression [] e = new Expression [1];
									   e [0] = a;
									   RESULT = new Row (e, aleft, aright);
									:}
								|	attribute:a row:r
									{:
									   Expression [ ] e = new Expression [ r.getExpressions().length + 1 ] ;
									   System.arraycopy ( r.getExpressions() , 0 , e , 1 , r.getExpressions().length ) ;
    								   e [0] = a ;
									   RESULT = new Row (e, aleft, rright);
									:}
								|	method:m
									{:
									   Expression [] e = new Expression [1];
									   e [0] = m;
									   RESULT = new Row (e, mleft, mright);
									:}
								|	method:m row:r
									{:
									   Expression [ ] e = new Expression [ r.getExpressions().length + 1 ] ;
    								   System.arraycopy ( r.getExpressions() , 0 , e , 1 , r.getExpressions().length ) ;
    								   e [0] = m ;
									   RESULT = new Row (e, mleft, rright);
									:}
								|	curried_method:cm
									{:
									   Expression [] e = new Expression [1];
									   e [0] = cm;
									   RESULT = new Row (e, cmleft, cmright);
									:}
								|	curried_method:cm row:r
									{:
									   Expression [ ] e = new Expression [ r.getExpressions().length + 1 ] ;
    								   System.arraycopy ( r.getExpressions() , 0 , e , 1 , r.getExpressions().length ) ;
    								   e [0] = cm ;
									   RESULT = new Row (e, cmleft, rright);
									:}
								;

attribute						::=	ATTRIBUTE:a IDENTIFIER:id EQUAL expr:e SEMI:s
									{:
									   Identifier idA = new Identifier (id,idleft,idright) ;
									   idA.setSet (Identifier.Set.ATTRIBUTE );
									   RESULT = new Attribute (idA, e, aleft, sright);
									:}
								|	ATTRIBUTE attribute_error_1
									{: :}
								;

attribute_error_1				::= /* epsilon */
									{: Error.expect("Attribute", "a = e ;"); :}
								|	IDENTIFIER
									{: Error.expect("Attribute", "= e ;"); :}
								|	IDENTIFIER EQUAL attribute_error_2
									{: :}
								;

attribute_error_2				::=	/* epsilon */
									{: Error.expect("Attribute", "e ;"); :}
								|	expr
									{: Error.expect("Attribute", ";"); :}
								;

method							::=	METHOD:m IDENTIFIER:id EQUAL expr:e SEMI:s
									{:
									   Identifier idM = new Identifier (id,idleft,idright) ;
									   idM.setSet (Identifier.Set.MESSAGE );
									   RESULT = new Method (idM, null, e, mleft, sright);
									:}
								|	METHOD:m IDENTIFIER:id COLON type:tau EQUAL expr:e SEMI:s
									{:
									   Identifier idM = new Identifier (id,idleft,idright) ;
									   idM.setSet (Identifier.Set.MESSAGE );
									   RESULT = new Method (idM, tau, e, mleft, sright);
									:}
								|	METHOD method_error_1
									{: :}
								;

method_error_1				::= /* epsilon */
									{: Error.expect("Method", "m = e ;", "m: \u03C4 = e ;"); :}
								|	IDENTIFIER
									{: Error.expect("Method", "= e ;", ": \u03C4 = e ;"); :}
								|	IDENTIFIER EQUAL method_error_2
									{: :}
								|	IDENTIFIER COLON
									{: Error.expect("Method", "\u03C4 = e ;"); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Method", "= e ;"); :}
								|	IDENTIFIER COLON type EQUAL method_error_2
									{: :}
								;

method_error_2					::=	/* epsilon */
									{: Error.expect("Method", "e ;"); :}
								|	expr
									{: Error.expect("Method", ";"); :}
								;

curried_method					::=	METHOD:m IDENTIFIER:id curried_method_list:l EQUAL expr:e SEMI:s
									{:
									   Identifier[] identifiers = new Identifier[l.length + 1];
									   MonoType[] types = new MonoType[l.length + 1 ];
									   for (int n = 0; n < l.length; n++) 
									   {
									     identifiers[n + 1] = l[n].id;
									     types[n + 1] = l[n].type;
									   }
									   Identifier idM = new Identifier (id,idleft,idright) ;
									   idM.setSet (Identifier.Set.MESSAGE );
									   identifiers [0] = idM ;
									   types [0] = null ;
									   RESULT = new CurriedMethod(identifiers, types, e, mleft, sright);
									:}
								|	METHOD:m IDENTIFIER:id curried_method_list:l COLON type:tau EQUAL expr:e SEMI:s
									{:
									   Identifier[] identifiers = new Identifier[l.length + 1];
									   MonoType[] types = new MonoType[l.length + 1 ];
									   for (int n = 0; n < l.length; n++) 
									   {
									     identifiers[n + 1] = l[n].id;
									     types[n + 1] = l[n].type;
									   }
									   Identifier idM = new Identifier (id,idleft,idright) ;
									   idM.setSet (Identifier.Set.MESSAGE );
									   identifiers [0] = idM ;
									   types [0] = tau ;
									   RESULT = new CurriedMethod (identifiers, types, e, mleft, sright);
									:}
								|	METHOD IDENTIFIER curried_method_list curried_method_error_1
									{: :}
								;	   

curried_method_error_1			::= /* epsilon */
									{: Error.expect("Curried-Method", "= e ;", ": \u03C4 = e ;"); :}
								|	EQUAL curried_method_error_2
									{: :}
								|	COLON
									{: Error.expect("Curried-Method", "\u03C4 = e ;"); :}
								|	COLON type
									{: Error.expect("Curried-Method", "= e ;"); :}
								|	COLON type EQUAL curried_method_error_2
									{: :}
								;

curried_method_error_2			::=	/* epsilon */
									{: Error.expect("Curried-Method", "e ;"); :}
								|	expr
									{: Error.expect("Curried-Method", ";"); :}
								;

curried_method_list				::= curried_method_list:l curried_method_pair:p
									{: 
									   RESULT = new IdTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = p;
									:}
								|	curried_method_pair:p
									{: RESULT = new IdTypePair[] { p }; :}
								;

curried_method_pair				::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), null); :}
								|	LPAREN curried_method_pair_error
									{: :}
								;

curried_method_pair_error		::= /* epsilon */
									{: Error.expect("Curried-Method", "id: \u03C4) = e", "id: \u03C4): \u03C4 = e"); :}
								|	IDENTIFIER
									{: Error.expect("Curried-Method", ": \u03C4) = e", ": \u03C4): \u03C4 = e"); :}
								|	IDENTIFIER COLON
									{: Error.expect("Curried-Method", "\u03C4) = e", "\u03C4): \u03C4 = e"); :}
								|	IDENTIFIER COLON type
									{: Error.expect("Curried-Method", ") = e", "): \u03C4 = e"); :}
								;

constant						::=	unit_constant:u
									{: RESULT = u; :}
								|	boolean_constant:b
									{: RESULT = b; :}
								|	integer_constant:i
									{: RESULT = i; :}
								|	not:n
									{: RESULT = n; :}
								;

unit_constant					::= PARENPAREN:u
									{: RESULT = new UnitConstant(uleft, uright); :}
								;

boolean_constant				::= TRUE:t
									{: RESULT = new BooleanConstant(true, tleft, tright); :}
								|	FALSE:f
									{: RESULT = new BooleanConstant(false, fleft, fright); :}
								;

integer_constant				::= NUMBER:n
									{: RESULT = new IntegerConstant(n.intValue(), nleft, nright); :}
								;

not								::= NOT:n
									{: RESULT = new Not(nleft, nright); :}
								;

operator						::=	arithmetic_operator:a
									{: RESULT = a; :}
								|	relational_operator:r
									{: RESULT = r; :}
								;

arithmetic_operator				::= PLUS:op		
									{: RESULT = ArithmeticOperator.newPlus(opleft, opright); :}
								|	MINUS:op		
									{: RESULT = ArithmeticOperator.newMinus(opleft, opright); :}
								|	STAR:op			
									{: RESULT = ArithmeticOperator.newMult(opleft, opright); :}
								|	SLASH:op			
									{: RESULT = ArithmeticOperator.newDiv(opleft, opright); :}
								|	MOD:op			
									{: RESULT = ArithmeticOperator.newMod(opleft, opright); :}
								;

relational_operator				::= EQUAL:op			
									{: RESULT = RelationalOperator.newEquals(opleft, opright); :}
								|	LESS:op			
									{: RESULT = RelationalOperator.newLowerThan(opleft, opright); :}
								|	GREATER:op		
									{: RESULT = RelationalOperator.newGreaterThan(opleft, opright); :}
								|	LESSEQUAL:op		
									{: RESULT = RelationalOperator.newLowerEqual(opleft, opright); :}
								|	GREATEREQUAL:op
									{: RESULT = RelationalOperator.newGreaterEqual(opleft, opright); :}
								;

simple_expr						::=	constant:c
									{: RESULT = c; :}
								|	identifier:id
									{: RESULT = id; :}
								|	send:s
									{: RESULT = s; :}
								|	LPAREN operator:o RPAREN
									{: RESULT = o; :}
								|	LPAREN operator simple_expr_error_1
									{: :}
								|	LPAREN expr:e RPAREN
									{: RESULT = e; :}
								|	LPAREN expr simple_expr_error_1
									{: :}
								|	LPAREN simple_expr_error_2
									{: :}
								;

simple_expr_error_1				::= /* epsilon */
									{: Error.expect("Expression", ")"); :}
								;

simple_expr_error_2				::= /* epsilon */
									{: Error.expect("Expression", "... )"); :}
								;

simple_expr_list				::=	simple_expr:e
									{: RESULT = new Expression[] { e }; :}
								|	simple_expr_list:l simple_expr:e
									{:
									   RESULT = new Expression[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = e;
									:}
								;


/*********
 * Types *
 *********/


type							::=	simple_type:t
									{: RESULT = t; :}
								|	arrow_type:a
									{: RESULT = a; :}
								;

simple_type						::=	LPAREN:l type:t RPAREN:r
									{: RESULT = t; :}
								|	LPAREN type simple_type_error
									{: :}
								|	boolean_type:b
									{: RESULT = b; :}
								|	integer_type:i
									{: RESULT = i; :}
								|	unit_type:u
									{: RESULT = u; :}
								|	type_variable:t
									{: RESULT = t; :}
								|	object_type:t
									{: RESULT = t; :}
								;

simple_type_error				::= /* epsilon */
									{: Error.expect("Type", ")"); :}
								;

arrow_type						::= type:t1 ARROW type:t2
									{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
								|	type ARROW arrow_type_error
									{: :}
								;

arrow_type_error				::= /* epsilon */
									{: Error.expect("Arrow-Type", "\u03C4<sub>2</sub>"); :}
								;

boolean_type					::= BOOL:b
									{: RESULT = new BooleanType(bleft, bright); :}
								;

integer_type					::= INT:i
									{: RESULT = new IntegerType(ileft, iright); :}
								;

unit_type						::= UNIT:u
									{: RESULT = new UnitType(uleft, uright); :}
								;

type_variable					::= TYPEVARIABLE:t
									{: RESULT = new TypeVariable(0, t, tleft, tright); :}
								;

object_type						::= LESS:l row_type:r GREATER:g
									{: 
									   Duplicated.check(r);
									   RESULT = new ObjectType ( r, lleft, gright);
									:}
								|	LESS:l GREATER:g
									{:
									   Identifier [] m = new Identifier [0];
									   MonoType [] types = new MonoType [0];
									   RESULT = new ObjectType ( new RowType (m, types), lleft, gright);
									:}
								|	LESS object_type_error
									{: :}
								;

object_type_error				::= /* epsilon */
									{: Error.expect("Object-Type", "m<sub>1</sub>: \u03C4; ... m<sub>n</sub>: \u03C4; >"); :}
								|	row_type
									{: Error.expect("Object-Type", "... m<sub>n</sub>: \u03C4; >"); :}
								;

row_type						::= IDENTIFIER:id COLON type:tau SEMI:s
									{:
									   Identifier [] m = new Identifier [1];
									   m [0] = new Identifier (id,idleft,idright);
									   MonoType [] types = new MonoType [1];
									   types [0] = tau;
									   RESULT = new RowType (m, types, idleft, sright) ;
									:}
								|	IDENTIFIER:id COLON type:tau SEMI row_type:r
									{:
									   Identifier [] m = new Identifier [r.getIdentifiers().length + 1];
									   m [0] = new Identifier (id,idleft,idright);
									   System.arraycopy ( r.getIdentifiers() , 0 , m , 1 , r.getIdentifiers().length );
									   MonoType [] types = new MonoType [r.getTypes().length + 1];
									   types [0] = tau;
									   System.arraycopy ( r.getTypes() , 0 , types , 1 , r.getTypes().length );
									   RESULT = new RowType (m, types, idleft, rright) ;
									:}
								|	IDENTIFIER row_type_error
									{: :}
								;

row_type_error					::= /* epsilon */
									{: Error.expect("Object-Type", ": \u03C4 ; ... m<sub>n</sub>: \u03C4; >"); :}
								|	COLON
									{: Error.expect("Object-Type", "\u03C4 ; ... m<sub>n</sub>: \u03C4; >"); :}
								|	COLON type
									{: Error.expect("Object-Type", "; ... m<sub>n</sub>: \u03C4; >"); :}
								;