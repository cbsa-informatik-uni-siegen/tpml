import de.unisiegen.tpml.core.expressions.Identifier ;
import de.unisiegen.tpml.core.languages.Error ;
import de.unisiegen.tpml.core.languages.MultipleIdentifier ;
import de.unisiegen.tpml.core.types.ArrowType ;
import de.unisiegen.tpml.core.types.BooleanType ;
import de.unisiegen.tpml.core.types.IntegerType ;
import de.unisiegen.tpml.core.types.MonoType ;
import de.unisiegen.tpml.core.types.ObjectType ;
import de.unisiegen.tpml.core.types.RecType ;
import de.unisiegen.tpml.core.types.RowType ;
import de.unisiegen.tpml.core.types.TypeName ;
import de.unisiegen.tpml.core.types.TypeVariable ;
import de.unisiegen.tpml.core.types.UnitType ;


/* Syntactic */
terminal			ARROW;
terminal			LPAREN;
terminal			RPAREN;
terminal			DOT;

/* Types */
terminal			BOOL;
terminal			INT;
terminal			UNIT;
terminal			MU;
terminal			LESS;
terminal			GREATER;
terminal			COLON;
terminal			SEMI;

/* Special */
terminal Integer	TYPEVARIABLE;
terminal String		IDENTIFIER;
terminal			COMMENT;

/* Non terminal - Type */
non terminal MonoType				type;
non terminal MonoType				simple_type;
non terminal BooleanType			boolean_type;
non terminal IntegerType			integer_type;
non terminal UnitType				unit_type;
non terminal TypeVariable			type_variable;
non terminal ArrowType				arrow_type;
non terminal TypeName				type_name;
non terminal RecType				rec_type;
non terminal ObjectType				object_type;
non terminal RowType				row_type;

/* Non terminal - Error */
non terminal 		epsilon;
non terminal 		simple_type_error;
non terminal 		arrow_type_error;
non terminal		rec_type_error;
non terminal 		object_type_error;
non terminal		row_type_error;

/* Precedence */
precedence right	ARROW;


/*********
 * Types *
 *********/


type							::=	simple_type:t
									{: RESULT = t; :}
								|	arrow_type:a
									{: RESULT = a; :}
								;

simple_type						::=	LPAREN:l type:t RPAREN:r
									{: 
									   t.setParserStartOffset(lleft);
									   t.setParserEndOffset(rright);
									   RESULT = t;
									:}
								|	boolean_type:b
									{: RESULT = b; :}
								|	integer_type:i
									{: RESULT = i; :}
								|	unit_type:u
									{: RESULT = u; :}
								|	type_variable:t
									{: RESULT = t; :}
								|	type_name:t
									{: RESULT = t; :}
								|	rec_type:r
									{: RESULT = r; :}
								|	object_type:t
									{: RESULT = t; :}
								|	simple_type_error
									{: :}
								;

simple_type_error				::= LPAREN:l epsilon
									{: Error.expect("Type", "\u03C4)", lleft, lright, "\u03C4",")"); :}
								|	LPAREN:l type:t epsilon
									{: Error.expect("Type", ")", lleft, tright, ")"); :}
								;

arrow_type						::= type:t1 ARROW type:t2
									{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
								|	arrow_type_error
									{: :}
								;

arrow_type_error				::= type:t ARROW:a epsilon 
									{: Error.expect("Arrow-Type", " \u03C4", tleft, aright, "\u03C4"); :}
								;

boolean_type					::= BOOL:b
									{: RESULT = new BooleanType(bleft, bright); :}
								;

integer_type					::= INT:i
									{: RESULT = new IntegerType(ileft, iright); :}
								;

unit_type						::= UNIT:u
									{: RESULT = new UnitType(uleft, uright); :}
								;

type_variable					::= TYPEVARIABLE:t
									{: RESULT = new TypeVariable(0, t, tleft, tright); :}
								;

type_name						::= IDENTIFIER:id
									{: RESULT = new TypeName(id, idleft, idright); :}
								;

rec_type						::= MU:m IDENTIFIER:id DOT type:t
									{: RESULT = new RecType(new TypeName(id, idleft, idright), t, mleft, tright); :}
								|	rec_type_error
									{: :}								
								;

rec_type_error					::= MU:m epsilon
									{: Error.expect("Rec-Type", " t.\u03C4", mleft, mright, "t",".","\u03C4"); :}
								|	MU:m IDENTIFIER:i epsilon
									{: Error.expect("Rec-Type", ".\u03C4", mleft, iright, ".","\u03C4"); :}
								|	MU:m IDENTIFIER DOT:d epsilon
									{: Error.expect("Rec-Type", "\u03C4", mleft, dright, "\u03C4"); :}
								;

object_type						::= LESS:l row_type:r GREATER:g
									{: 
									   MultipleIdentifier.check(r);
									   RESULT = new ObjectType ( r, lleft, gright);
									:}
								|	object_type_error
									{: :}
								;

object_type_error				::= LESS:l row_type:r epsilon
									{: Error.expect("Object-Type", " >", lleft, rright, "..."," ","m_n",":"," ","\u03C4",";"," ",">"); :}
								;

row_type						::= epsilon
									{: RESULT = new RowType (new Identifier[0], new MonoType[0]) ; :}
								|	IDENTIFIER:id COLON type:tau SEMI row_type:r
									{:
									   Identifier [] identifiers = new Identifier [r.getIdentifiers().length + 1];
									   identifiers [0] = new Identifier (id,Identifier.Set.METHOD,idleft,idright);
									   System.arraycopy ( r.getIdentifiers() , 0 , identifiers , 1 , r.getIdentifiers().length );
									   MonoType [] types = new MonoType [r.getTypes().length + 1];
									   types [0] = tau;
									   System.arraycopy ( r.getTypes() , 0 , types , 1 , r.getTypes().length );
									   RESULT = new RowType (identifiers, types, idleft, rright) ;
									:}
								|	row_type_error
									{: :}
								;

row_type_error					::= IDENTIFIER:i epsilon
									{: Error.expect("Row-Type", ": \u03C4 ;", ileft, iright, ":"," ","\u03C4"," ",";"," ","..."," ","m_n",":"," ","\u03C4"," ",";"); :}
								|	IDENTIFIER:i COLON:c epsilon
									{: Error.expect("Row-Type", " \u03C4 ;", ileft, cright, "\u03C4"," ",";"," ","..."," ","m_n",":"," ","\u03C4"," ",";"); :}
								|	IDENTIFIER:i COLON type:t epsilon
									{: Error.expect("Row-Type", " ;", ileft, tright, ";"," ","..."," ","m_n",":"," ","\u03C4"," ",";"); :}
								;

epsilon							::= /* epsilon */
									{: :}	
								;