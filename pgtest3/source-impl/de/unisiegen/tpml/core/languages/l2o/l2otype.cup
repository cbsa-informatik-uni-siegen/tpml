import de.unisiegen.tpml.core.types.*;
import de.unisiegen.tpml.core.expressions.*;
import java.util.ArrayList;
import de.unisiegen.tpml.core.exceptions.LanguageParserMultiException;
import de.unisiegen.tpml.core.languages.LanguageParserException;
import de.unisiegen.tpml.core.Messages ;
import java.text.MessageFormat;


/* Helper classes */
action code 
{:
  private static class Duplicated
  {
    public static void check(RowType pRowType)
    {
	  ArrayList <Identifier> negativeIdentifiers = new ArrayList <Identifier> ();
	  Identifier [] identifier = pRowType.getIdentifiers() ;
      for ( int i = 0 ; i < identifier.length ; i ++ )
      {
        negativeIdentifiers.clear();
        for ( int j = i+1 ; j < identifier.length ; j++ )
        {
          if ( identifier [i].equals(identifier[j]) )
    	  {
  	        negativeIdentifiers.add(identifier[j]);
    	  }
    	}
    	negativeIdentifiers.add ( identifier [i] ) ;
    	LanguageParserMultiException.throwExceptionRowType ( negativeIdentifiers ) ;
      }
    }
  }
  
  private static class Error
  {
    public static void expect(String ... pTokenSequence)
    {
      expect (0, 0, pTokenSequence);
    }
    
    public static void expect(int pLeft, int pRight , String ... pTokenSequence)
    {
      String or = Messages.getString ( "Parser.15" ) ;
      String result = "" ;
      for ( int i = 0; i < pTokenSequence.length ; i++)
      {
        if ( i == 0 )
        {
          result += "\"" + pTokenSequence [i] + "\"" ;
        }
        else if ( i == pTokenSequence.length - 1 )
        {
          result += " " + or + " \"" + pTokenSequence [i]+ "\"";
        }
        else
        {
          result += ", \"" + pTokenSequence [i]+ "\"";
        }
      }
      throw new LanguageParserException (  
        MessageFormat.format ( "<html>" + Messages.getString ( "Parser.14" ) + "</html>", 
          result ) , pLeft, pRight);
    }
  }
:}


/* Syntactic tokens */
terminal			ARROW;
terminal			LPAREN, RPAREN;

/* Types */
terminal			BOOL, INT, UNIT, LESS, GREATER, COLON, SEMI;

/* Special tokens */
terminal Integer	TYPEVARIABLE;
terminal String		IDENTIFIER;

/* Non terminals */
non terminal MonoType				type;
non terminal MonoType				simple_type;
non terminal BooleanType			boolean_type;
non terminal IntegerType			integer_type;
non terminal UnitType				unit_type;
non terminal TypeVariable			type_variable;
non terminal ArrowType				arrow_type;
non terminal ObjectType				object_type;
non terminal RowType				row_type;

/* Error non terminals */
non terminal 		simple_type_error;
non terminal 		arrow_type_error;
non terminal 		object_type_error;
non terminal		row_type_error;

/* Precedences, based on http://caml.inria.fr/pub/docs/manual-ocaml/manual015.html */
precedence right	ARROW;


/*********
 * Types *
 *********/


type							::=	simple_type:t
									{: RESULT = t; :}
								|	arrow_type:a
									{: RESULT = a; :}
								;

simple_type						::=	LPAREN:l type:t RPAREN:r
									{: RESULT = t; :}
								|	LPAREN type simple_type_error
									{: :}
								|	boolean_type:b
									{: RESULT = b; :}
								|	integer_type:i
									{: RESULT = i; :}
								|	unit_type:u
									{: RESULT = u; :}
								|	type_variable:t
									{: RESULT = t; :}
								|	object_type:t
									{: RESULT = t; :}
								;

simple_type_error				::= /* epsilon */
									{: Error.expect(")"); :}
								;

arrow_type						::= type:t1 ARROW type:t2
									{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
								|	type ARROW arrow_type_error
									{: :}
								;

arrow_type_error				::= /* epsilon */
									{: Error.expect("\u03C4<sub>2</sub>"); :}
								;

boolean_type					::= BOOL:b
									{: RESULT = new BooleanType(bleft, bright); :}
								;

integer_type					::= INT:i
									{: RESULT = new IntegerType(ileft, iright); :}
								;

unit_type						::= UNIT:u
									{: RESULT = new UnitType(uleft, uright); :}
								;

type_variable					::= TYPEVARIABLE:t
									{: RESULT = new TypeVariable(0, t, tleft, tright); :}
								;

object_type						::= LESS:l row_type:r GREATER:g
									{: 
									   Duplicated.check(r);
									   RESULT = new ObjectType ( r, lleft, gright);
									:}
								|	LESS:l GREATER:g
									{:
									   Identifier [] m = new Identifier [0];
									   MonoType [] types = new MonoType [0];
									   RESULT = new ObjectType ( new RowType (m, types), lleft, gright);
									:}
								|	LESS object_type_error
									{: :}
								;

object_type_error				::= /* epsilon */
									{: Error.expect(">", "\u03A6 >"); :}
								|	row_type
									{: Error.expect(">", "\u03A6 >"); :}
								;

row_type						::= IDENTIFIER:id COLON type:tau SEMI:s
									{:
									   Identifier [] m = new Identifier [1];
									   m [0] = new Identifier (id,idleft,idright);
									   MonoType [] types = new MonoType [1];
									   types [0] = tau;
									   RESULT = new RowType (m, types, idleft, sright) ;
									:}
								|	IDENTIFIER:id COLON type:tau SEMI row_type:r
									{:
									   Identifier [] m = new Identifier [r.getIdentifiers().length + 1];
									   m [0] = new Identifier (id,idleft,idright);
									   System.arraycopy ( r.getIdentifiers() , 0 , m , 1 , r.getIdentifiers().length );
									   MonoType [] types = new MonoType [r.getTypes().length + 1];
									   types [0] = tau;
									   System.arraycopy ( r.getTypes() , 0 , types , 1 , r.getTypes().length );
									   RESULT = new RowType (m, types, idleft, rright) ;
									:}
								|	IDENTIFIER row_type_error
									{: :}
								;

row_type_error					::= /* epsilon */
									{: Error.expect(": \u03C4 ;"); :}
								|	COLON
									{: Error.expect("\u03C4 ;"); :}
								|	COLON type
									{: Error.expect(";"); :}
								;