import de.unisiegen.tpml.core.expressions.And ;
import de.unisiegen.tpml.core.expressions.Application ;
import de.unisiegen.tpml.core.expressions.ArithmeticOperator ;
import de.unisiegen.tpml.core.expressions.Assign ;
import de.unisiegen.tpml.core.expressions.BinaryCons ;
import de.unisiegen.tpml.core.expressions.BinaryOperator ;
import de.unisiegen.tpml.core.expressions.BooleanConstant ;
import de.unisiegen.tpml.core.expressions.Condition ;
import de.unisiegen.tpml.core.expressions.Condition1 ;
import de.unisiegen.tpml.core.expressions.Constant ;
import de.unisiegen.tpml.core.expressions.CurriedLet ;
import de.unisiegen.tpml.core.expressions.CurriedLetRec ;
import de.unisiegen.tpml.core.expressions.Deref ;
import de.unisiegen.tpml.core.expressions.EmptyList ;
import de.unisiegen.tpml.core.expressions.Expression ;
import de.unisiegen.tpml.core.expressions.Fst ;
import de.unisiegen.tpml.core.expressions.Hd ;
import de.unisiegen.tpml.core.expressions.Identifier ;
import de.unisiegen.tpml.core.expressions.InfixOperation ;
import de.unisiegen.tpml.core.expressions.IntegerConstant ;
import de.unisiegen.tpml.core.expressions.IsEmpty ;
import de.unisiegen.tpml.core.expressions.Lambda ;
import de.unisiegen.tpml.core.expressions.Let ;
import de.unisiegen.tpml.core.expressions.LetRec ;
import de.unisiegen.tpml.core.expressions.List ;
import de.unisiegen.tpml.core.expressions.MultiLambda ;
import de.unisiegen.tpml.core.expressions.MultiLet ;
import de.unisiegen.tpml.core.expressions.Not ;
import de.unisiegen.tpml.core.expressions.Or ;
import de.unisiegen.tpml.core.expressions.Projection ;
import de.unisiegen.tpml.core.expressions.Recursion ;
import de.unisiegen.tpml.core.expressions.Ref ;
import de.unisiegen.tpml.core.expressions.RelationalOperator ;
import de.unisiegen.tpml.core.expressions.Sequence ;
import de.unisiegen.tpml.core.expressions.Snd ;
import de.unisiegen.tpml.core.expressions.Tl ;
import de.unisiegen.tpml.core.expressions.Tuple ;
import de.unisiegen.tpml.core.expressions.UnaryCons ;
import de.unisiegen.tpml.core.expressions.UnitConstant ;
import de.unisiegen.tpml.core.expressions.While ;
import de.unisiegen.tpml.core.languages.Error ;
import de.unisiegen.tpml.core.languages.IdentifierTypePair ;
import de.unisiegen.tpml.core.types.ArrowType ;
import de.unisiegen.tpml.core.types.BooleanType ;
import de.unisiegen.tpml.core.types.IntegerType ;
import de.unisiegen.tpml.core.types.ListType ;
import de.unisiegen.tpml.core.types.MonoType ;
import de.unisiegen.tpml.core.types.RecType ;
import de.unisiegen.tpml.core.types.RefType ;
import de.unisiegen.tpml.core.types.TupleType ;
import de.unisiegen.tpml.core.types.TypeName ;
import de.unisiegen.tpml.core.types.TypeVariable ;
import de.unisiegen.tpml.core.types.UnitType ;


/* Terminals */
terminal			PLUS;
terminal			MINUS;
terminal			STAR;
terminal			SLASH;
terminal			MOD;
terminal			EQUAL;
terminal			LESS;
terminal			GREATER;
terminal			LESSEQUAL;
terminal			GREATEREQUAL;
terminal			AMPERAMPER;
terminal			BARBAR;
terminal			NOT;
terminal			FST;
terminal			SND;
terminal			CONS;
terminal			IS_EMPTY;
terminal			HD;
terminal			TL;
terminal			COLONCOLON;

/* Syntactic */
terminal			DOT;
terminal			LPAREN;
terminal			RPAREN;
terminal			ARROW;
terminal			COLON;
terminal			PARENPAREN;
terminal			COMMA;
terminal			SEMI;
terminal			LBRACKET;
terminal			RBRACKET;
terminal			BRACKETBRACKET;
terminal			BELOW_SEMI;
terminal			COLONEQUAL;
terminal			EXCLAMATION;

/* Keywords */
terminal			LAMBDA;
terminal			LET;
terminal			IN;
terminal			IF;
terminal			THEN;
terminal			ELSE;
terminal			TRUE;
terminal			FALSE;
terminal			REC;
terminal			REF;
terminal			WHILE;
terminal			DO;

/* Types */
terminal			BOOL;
terminal			INT;
terminal			UNIT;
terminal			MU;
terminal			LIST;

/* Special */
terminal String		IDENTIFIER;
terminal			COMMENT;
terminal Integer	NUMBER;
terminal Integer	TYPEVARIABLE;
terminal Integer[]	PROJECTION;

/* Non terminal - Expression */
non terminal Expression				seq_expr;
non terminal Expression				expr;
non terminal Expression				simple_expr;
non terminal Expression[]			simple_expr_list;
non terminal Identifier				identifier;
non terminal Expression				application;
non terminal Lambda					lambda;
non terminal Constant				constant;
non terminal BinaryOperator			operator;
non terminal ArithmeticOperator		arithmetic_operator;
non terminal RelationalOperator		relational_operator;
non terminal InfixOperation 		infix_operation;
non terminal InfixOperation 		infix_operation_plus;
non terminal InfixOperation 		infix_operation_minus;
non terminal InfixOperation 		infix_operation_mult;
non terminal InfixOperation 		infix_operation_div;
non terminal InfixOperation 		infix_operation_mod;
non terminal InfixOperation 		infix_operation_equal;
non terminal InfixOperation 		infix_operation_less;
non terminal InfixOperation 		infix_operation_greater;
non terminal InfixOperation 		infix_operation_less_equal;
non terminal InfixOperation 		infix_operation_greater_equal;
non terminal And					and;
non terminal Or						or;
non terminal Condition				condition;
non terminal Let					let;
non terminal CurriedLet				curried_let;
non terminal UnitConstant			unit_constant;
non terminal BooleanConstant		boolean_constant;
non terminal IntegerConstant		integer_constant;
non terminal Not					not;
non terminal Recursion				recursion;
non terminal LetRec					let_rec;
non terminal CurriedLetRec			curried_let_rec;
non terminal InfixOperation 		infix_operation_binary_cons;
non terminal BinaryCons				binary_cons;
non terminal Fst					fst;
non terminal Snd					snd;
non terminal UnaryCons				unary_cons;
non terminal IsEmpty				is_empty;
non terminal Hd						hd;
non terminal Tl						tl;
non terminal EmptyList				empty_list;
non terminal Projection				projection;
non terminal Tuple					tuple;
non terminal List					list;
non terminal MultiLambda			multi_lambda;
non terminal MultiLet				multi_let;
non terminal InfixOperation 		infix_operation_assign;
non terminal Sequence				sequence;
non terminal Condition1				condition1;
non terminal Assign					assign;
non terminal Deref					deref;
non terminal Ref					ref;
non terminal While					while;

/* Non terminal - Type */
non terminal MonoType				type;
non terminal MonoType				simple_type;
non terminal BooleanType			boolean_type;
non terminal IntegerType			integer_type;
non terminal UnitType				unit_type;
non terminal TypeVariable			type_variable;
non terminal ArrowType				arrow_type;
non terminal TypeName				type_name;
non terminal RecType				rec_type;
non terminal TupleType				tuple_type;
non terminal ListType				list_type;
non terminal RefType				ref_type;

/* Non terminal - Helper */
non terminal IdentifierTypePair[]			curried_let_list;
non terminal IdentifierTypePair				curried_let_pair;
non terminal IdentifierTypePair[]			curried_let_rec_list;
non terminal IdentifierTypePair				curried_let_rec_pair;
non terminal Expression[]					tuple_list;
non terminal Expression[]					list_list;
non terminal Identifier[]					multi_lambda_list;
non terminal Identifier[]					multi_let_list;
non terminal MonoType[]						tuple_type_list;

/* Non terminal - Error */
non terminal 		epsilon;
non terminal 		simple_expr_error;
non terminal 		lambda_error;
non terminal 		and_error;
non terminal 		or_error;
non terminal 		condition_error;
non terminal 		let_error;
non terminal 		curried_let_error;
non terminal 		curried_let_pair_error;
non terminal 		infix_operation_plus_error;
non terminal  		infix_operation_minus_error;
non terminal  		infix_operation_mult_error;
non terminal  		infix_operation_div_error;
non terminal  		infix_operation_mod_error;
non terminal  		infix_operation_equal_error;
non terminal  		infix_operation_less_error;
non terminal  		infix_operation_greater_error;
non terminal  		infix_operation_less_equal_error;
non terminal  		infix_operation_greater_equal_error;
non terminal 		simple_type_error;
non terminal 		arrow_type_error;
non terminal		rec_type_error;
non terminal 		recursion_error;
non terminal 		let_rec_error;
non terminal 		curried_let_rec_error;
non terminal 		curried_let_rec_pair_error;
non terminal  		infix_operation_binary_cons_error;
non terminal		tuple_type_list_error;
non terminal		tuple_error;
non terminal		tuple_list_error;
non terminal		list_error;
non terminal		list_list_error;
non terminal 		multi_let_error;
non terminal 		multi_let_list_error;
non terminal 		multi_lambda_error;
non terminal 		multi_lambda_list_error;
non terminal		infix_operation_assign_error;
non terminal		while_error;
non terminal		sequence_error;

/* Precedence */
precedence nonassoc	IN;
precedence nonassoc	BELOW_SEMI;
precedence nonassoc	SEMI;
precedence nonassoc LET, REC;
precedence nonassoc DO;
precedence nonassoc THEN;
precedence nonassoc ELSE;
precedence right	COLONEQUAL;
precedence right	ARROW;
precedence right	BARBAR;
precedence right	AMPERAMPER;
precedence left		EQUAL;
precedence left		LESS;
precedence left		GREATER;
precedence left		LESSEQUAL;
precedence left		GREATEREQUAL;
precedence right	COLONCOLON;
precedence left		PLUS;
precedence left		MINUS;
precedence left		STAR;
precedence left		SLASH;
precedence left		MOD;


/***************
 * Expressions *
 ***************/


seq_expr						::= expr:e
									{: RESULT = e; :}
									%prec BELOW_SEMI
								|	sequence:s
									{: RESULT = s; :}
								;

expr							::=	simple_expr:e
									{: RESULT = e; :}
								|   application:a
									{: RESULT = a; :}
								|	lambda:l
									{: RESULT = l; :}
								|   infix_operation:i
									{: RESULT = i; :}
								|	and:a
									{: RESULT = a; :}
								|	or:o
									{: RESULT = o; :}
								|	condition:c
									{: RESULT = c; :}
								|	let:l
									{: RESULT = l; :}
								|	curried_let:c
									{: RESULT = c; :}
								|	recursion:r
									{: RESULT = r; :}
								|	let_rec:l
									{: RESULT = l; :}
								|   curried_let_rec:c
									{: RESULT = c; :}
								|	multi_lambda:m
									{: RESULT = m; :}
								|	multi_let:m
									{: RESULT = m; :}
								|	condition1:c
									{: RESULT = c; :}
								|	while:w
									{: RESULT = w; :}
								;

sequence						::= expr:e1 SEMI seq_expr:e2
									{: RESULT = new Sequence(e1, e2, e1left, e2right); :}
								|   sequence_error
									{: :}
								;

sequence_error					::= expr:e1 SEMI:s epsilon
									{: Error.expect("Sequence", " e2", e1left, sright, "e<sub>2</sub>" ); :}
								;

identifier						::= IDENTIFIER:id
									{: RESULT = new Identifier (id,idleft,idright); :}
								;

application						::= simple_expr:e simple_expr_list:l
									{:
									   for (int n = 0; n < l.length; ++n) 
						  			   {
						    			 e = new Application(e, l[n],
						      			   e.getParserStartOffset ( ) , 
						       				 l[n].getParserEndOffset ( ) );
						   			   }
						   			   RESULT = e; 
						   			:}
								;

infix_operation					::= infix_operation_plus:i
									{: RESULT = i ; :}
								|	infix_operation_minus:i
									{: RESULT = i ; :}
								|	infix_operation_mult:i
									{: RESULT = i ; :}
								|	infix_operation_div:i
									{: RESULT = i ; :}
								|	infix_operation_mod:i
									{: RESULT = i ; :}
								|	infix_operation_equal:i
									{: RESULT = i ; :}
								|	infix_operation_less:i
									{: RESULT = i ; :}
								|	infix_operation_greater:i
									{: RESULT = i ; :}
								|	infix_operation_less_equal:i
									{: RESULT = i ; :}
								|	infix_operation_greater_equal:i
									{: RESULT = i ; :}
								|	infix_operation_binary_cons:i
									{: RESULT = i ; :}
								|	infix_operation_assign:i
									{: RESULT = i ; :}
								;

infix_operation_plus			::= expr:e1 PLUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newPlus(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_plus_error
									{: :}
								;

infix_operation_plus_error		::= expr:e1 PLUS:p epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, pright, "e<sub>2</sub>" ); :}
								;

infix_operation_minus			::= expr:e1 MINUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMinus(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_minus_error
									{: :}
								;

infix_operation_minus_error		::= expr:e1 MINUS:m epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, mright, "e<sub>2</sub>" ); :}
								;

infix_operation_mult			::=	expr:e1 STAR:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMult(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_mult_error
									{: :}
								;

infix_operation_mult_error		::= expr:e1 STAR:s epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, sright, "e<sub>2</sub>" ); :}
								;

infix_operation_div				::=	expr:e1 SLASH:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newDiv(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_div_error
									{: :}
								;

infix_operation_div_error		::= expr:e1 SLASH:s epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, sright, "e<sub>2</sub>" ); :}
								;

infix_operation_mod				::=	expr:e1 MOD:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMod(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_mod_error
									{: :}
								;

infix_operation_mod_error		::= expr:e1 MOD:m epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, mright, "e<sub>2</sub>" ); :}
								;

infix_operation_equal			::=	expr:e1 EQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newEquals(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_equal_error
									{: :}
								;

infix_operation_equal_error		::= expr:e1 EQUAL:e epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, eright, "e<sub>2</sub>" ); :}
								;

infix_operation_less			::=	expr:e1 LESS:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_less_error
									{: :}
								;

infix_operation_less_error		::= expr:e1 LESS:l epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, lright, "e<sub>2</sub>" ); :}
								;
						
infix_operation_greater			::=	expr:e1 GREATER:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_greater_error
									{: :}
								;

infix_operation_greater_error	::= expr:e1 GREATER:g epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, gright, "e<sub>2</sub>" ); :}
								;

infix_operation_less_equal		::=	expr:e1 LESSEQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_less_equal_error
									{: :}
								;

infix_operation_less_equal_error	::= expr:e1 LESSEQUAL:l epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, lright, "e<sub>2</sub>" ); :}
								;

infix_operation_greater_equal	::=	expr:e1 GREATEREQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_greater_equal_error
									{: :}
								;

infix_operation_greater_equal_error	::= expr:e1 GREATEREQUAL:g epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, gright, "e<sub>2</sub>" ); :}
								;

infix_operation_binary_cons		::=	expr:e1 COLONCOLON:op expr:e2
									{: RESULT = new InfixOperation(new BinaryCons(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_binary_cons_error
									{: :}
								;

infix_operation_binary_cons_error	::= expr:e1 COLONCOLON:c epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, cright, "e<sub>2</sub>" ); :}
								;


infix_operation_assign			::= expr:e1 COLONEQUAL:op expr:e2
									{: RESULT = new InfixOperation(new Assign(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_assign_error
									{: :}
								;

infix_operation_assign_error	::= expr:e1 COLONEQUAL:c epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, cright, "e<sub>2</sub>" ); :}
								;

and								::= expr:e1 AMPERAMPER expr:e2
									{: RESULT = new And(e1, e2,e1left,e2right); :}
								|	and_error
									{: :}
								;

and_error						::= expr:e1 AMPERAMPER:a epsilon
									{: Error.expect("And", " e2", e1left, aright, "e<sub>2</sub>" ); :}
								;

or								::= expr:e1 BARBAR expr:e2
									{: RESULT = new Or(e1, e2, e1left, e2right); :}
								|	or_error
									{: :}
								;

or_error						::= expr:e1 BARBAR:b epsilon
									{: Error.expect("Or", " e2", e1left, bright, "e<sub>2</sub>" ); :}
								;

condition						::= IF:i seq_expr:e0 THEN seq_expr:e1 ELSE seq_expr:e2
									{: RESULT = new Condition(e0, e1, e2, ileft, e2right); :}
								|	condition_error
									{: :}
								;

condition_error					::= IF:i epsilon
									{: Error.expect("Condition", " e0 then e1 else e2", ileft, iright, "e<sub>0</sub> then e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	IF:i seq_expr:e epsilon
									{: Error.expect("Condition", " then e1 else e2", ileft, eright, "then e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	IF:i seq_expr THEN:t epsilon
									{: Error.expect("Condition", " e1 else e2", ileft, tright, "e<sub>1</sub> else e<sub>2</sub>" ); :}
								|	IF:i seq_expr THEN seq_expr:e epsilon
									{: Error.expect("Condition", " else e2", ileft, eright, "else e<sub>2</sub>" ); :}
								|	IF:i seq_expr THEN seq_expr ELSE:e epsilon
									{: Error.expect("Condition", " e2", ileft, eright, "e<sub>2</sub>" ); :}
								;

condition1						::=	IF:i seq_expr:e0 THEN seq_expr:e1
									{: RESULT = new Condition1(e0, e1, ileft, e1right); :}
								;

lambda							::= LAMBDA:l IDENTIFIER:id DOT seq_expr:e
									{: RESULT = new Lambda(new Identifier (id,idleft,idright), null, e, lleft, eright); :}
								|	LAMBDA:l IDENTIFIER:id COLON type:tau DOT seq_expr:e
									{: RESULT = new Lambda(new Identifier (id,idleft,idright), tau, e, lleft, eright); :}
								|	lambda_error
									{: :}
								;

lambda_error					::= LAMBDA:l epsilon
									{: Error.expect("Lambda", " id.e", lleft, lright, "id.e", "id: \u03C4.e" ); :}
								|	LAMBDA:l IDENTIFIER:i epsilon
									{: Error.expect("Lambda", ".e", lleft, iright, ".e", ": \u03C4.e" ); :}
								|	LAMBDA:l IDENTIFIER DOT:d epsilon
									{: Error.expect("Lambda", "e", lleft, dright, "e" ); :}
								|	LAMBDA:l IDENTIFIER COLON:c epsilon
									{: Error.expect("Lambda", " \u03C4.e", lleft, cright, "\u03C4.e" ); :}
								|	LAMBDA:l IDENTIFIER COLON type:t epsilon
									{: Error.expect("Lambda", ".e", lleft, tright, ".e" ); :}
								|	LAMBDA:l IDENTIFIER COLON type DOT:d epsilon
									{: Error.expect("Lambda", "e", lleft, dright, "e" ); :}
								// Missing identifier
								|	LAMBDA:l DOT epsilon
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}
								|	LAMBDA:l DOT seq_expr
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}
								|	LAMBDA:l COLON epsilon
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}
								|	LAMBDA:l COLON type epsilon
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}
								|	LAMBDA:l COLON type DOT epsilon
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}									
								|	LAMBDA:l COLON type DOT seq_expr
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}
								// Missing dot
								|	LAMBDA:l IDENTIFIER:id seq_expr
									{: Error.expect("Lambda", ".", lleft, idright, "." ); :}
								|	LAMBDA:l IDENTIFIER COLON type:tau seq_expr
									{: Error.expect("Lambda", ".", lleft, tauright, "." ); :}
								// Missing colon
								|	LAMBDA:l IDENTIFIER:id type epsilon
									{: Error.expect("Lambda", ":", lleft, idright, ":" ); :}
								|	LAMBDA:l IDENTIFIER:id type DOT epsilon
									{: Error.expect("Lambda", ":", lleft, idright, ":" ); :}
								|	LAMBDA:l IDENTIFIER:id type DOT seq_expr
									{: Error.expect("Lambda", ":", lleft, idright, ":" ); :}
								// Missing type
								|	LAMBDA:l IDENTIFIER COLON:c DOT epsilon
									{: Error.expect("Lambda", " \u03C4", lleft, cright, "\u03C4" ); :}
								|	LAMBDA:l IDENTIFIER COLON:c DOT seq_expr
									{: Error.expect("Lambda", " \u03C4", lleft, cright, "\u03C4" ); :}
								// Missing identifier and colon
								|	LAMBDA:l type epsilon
									{: Error.expect("Lambda", " id:", lleft, lright, "id:" ); :}
								|	LAMBDA:l type DOT epsilon
									{: Error.expect("Lambda", " id:", lleft, lright, "id:" ); :}
								|	LAMBDA:l type DOT seq_expr
									{: Error.expect("Lambda", " id:", lleft, lright, "id:" ); :}
								// Missing type and dot
								|	LAMBDA:l IDENTIFIER COLON:c seq_expr:e
									{: Error.expect("Lambda", " \u03C4.", lleft, cright, "\u03C4." ); :}
								;

let								::= LET:l IDENTIFIER:id EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new Let(new Identifier (id,idleft,idright), null, e1, e2, lleft, e2right); :}
								|	LET:l IDENTIFIER:id COLON type:tau EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new Let(new Identifier (id,idleft,idright), tau, e1, e2, lleft, e2right); :}
								|	let_error
									{: :}
								;

let_error						::= LET:l epsilon
									{: Error.expect("Let", " id = e1 in e2", lleft, lright, "id = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER:i epsilon
									{: Error.expect("Let", " = e1 in e2", lleft, iright, "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	LET:l IDENTIFIER COLON:c epsilon
									{: Error.expect("Let", " \u03C4 = e1 in e2", lleft, cright, "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}	
								|	LET:l IDENTIFIER COLON type:t epsilon
									{: Error.expect("Let", " = e1 in e2", lleft, tright, "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	LET:l IDENTIFIER COLON type EQUAL:e epsilon
									{: Error.expect("Let", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER COLON type EQUAL seq_expr:e epsilon
									{: Error.expect("Let", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER COLON type EQUAL seq_expr IN:i epsilon
									{: Error.expect("Let", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER EQUAL:e epsilon
									{: Error.expect("Let", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER EQUAL seq_expr:e epsilon
									{: Error.expect("Let", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER EQUAL seq_expr IN:i epsilon
									{: Error.expect("Let", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								// Missing type
								|	LET:l IDENTIFIER COLON:c EQUAL seq_expr IN seq_expr
									{: Error.expect("Let", " \u03C4 ", lleft, cright, "\u03C4" ); :}
								;

curried_let						::= LET:l IDENTIFIER:id curried_let_list:itl EQUAL seq_expr:e1 IN seq_expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].getId();
									     types[n + 1] = itl[n].getTau();
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET:l IDENTIFIER:id curried_let_list:itl COLON type:tau EQUAL seq_expr:e1 IN seq_expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].getId();
									     types[n + 1] = itl[n].getTau();
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   types[0] = tau;
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	curried_let_error
									{: :}
								;

curried_let_error				::= LET:l IDENTIFIER curried_let_list:c epsilon
									{: Error.expect("Curried-Let", " = e1 in e2", lleft, cright, "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON:c epsilon
									{: Error.expect("Curried-Let", " \u03C4 = e1 in e2", lleft, cright, "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type:t epsilon
									{: Error.expect("Curried-Let", " = e1 in e2", lleft, tright, "= e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type EQUAL:e epsilon
									{: Error.expect("Curried-Let", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type EQUAL seq_expr:e epsilon
									{: Error.expect("Curried-Let", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type EQUAL seq_expr IN:i epsilon
									{: Error.expect("Curried-Let", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list EQUAL:e epsilon
									{: Error.expect("Curried-Let", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list EQUAL seq_expr:e epsilon
									{: Error.expect("Curried-Let", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l IDENTIFIER curried_let_list EQUAL seq_expr IN:i epsilon
									{: Error.expect("Curried-Let", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								// Missing type
								|	LET:l IDENTIFIER curried_let_list COLON:c  EQUAL seq_expr IN seq_expr
									{: Error.expect("Curried-Let", " \u03C4 ", lleft, cright, "\u03C4" ); :}
								;

curried_let_list				::= curried_let_list:l curried_let_pair:p
									{: 
									   RESULT = new IdentifierTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = p;
									:}
								|	curried_let_pair:p
									{: RESULT = new IdentifierTypePair[] { p }; :}
								;

curried_let_pair				::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdentifierTypePair(new Identifier (id,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdentifierTypePair(new Identifier (id,idleft,idright), null); :}
								|	curried_let_pair_error
									{: :}
								;

curried_let_pair_error			::= LPAREN:l epsilon
									{: Error.expect("Curried-Let", "id: \u03C4)", lleft, lright, "id: \u03C4)" ); :}
								|	LPAREN:l IDENTIFIER:i epsilon
									{: Error.expect("Curried-Let", ": \u03C4)", lleft, iright, ": \u03C4)" ); :}
								|	LPAREN:l IDENTIFIER COLON:c epsilon
									{: Error.expect("Curried-Let", " \u03C4)", lleft, cright, "\u03C4)" ); :}
								|	LPAREN:l IDENTIFIER COLON type:t epsilon
									{: Error.expect("Curried-Let", ")", lleft, tright, ")" ); :}
								// Missing type
								|	LPAREN:l IDENTIFIER COLON:c RPAREN
									{: Error.expect("Curried-Let", " \u03C4", lleft, cright, "\u03C4" ); :}
								;

recursion						::= REC:r IDENTIFIER:id DOT seq_expr:e
									{: RESULT = new Recursion(new Identifier (id,idleft,idright), null, e, rleft, eright); :}
								|	REC:r IDENTIFIER:id COLON type:tau DOT seq_expr:e
									{: RESULT = new Recursion(new Identifier (id,idleft,idright), tau, e, rleft, eright); :}
								|	recursion_error
									{: :}					
								;

recursion_error					::= REC:r epsilon
									{: Error.expect("Recursion", " id.e", rleft, rright, "id.e", "id: \u03C4.e" ); :}
								|	REC:r IDENTIFIER:i epsilon
									{: Error.expect("Recursion", ".e", rleft, iright, ".e", ": \u03C4.e" ); :}
								|	REC:r IDENTIFIER COLON:c epsilon
									{: Error.expect("Recursion", " \u03C4.e", rleft, cright, "\u03C4.e" ); :}
								|	REC:r IDENTIFIER COLON type:t epsilon
									{: Error.expect("Recursion", ".e", rleft, tright, ".e" ); :}
								|	REC:r IDENTIFIER COLON type DOT:d epsilon
									{: Error.expect("Recursion", "e", rleft, dright, "e" ); :}
								|	REC:r IDENTIFIER DOT:d epsilon
									{: Error.expect("Recursion", "e", rleft, dright, "e" ); :}
								// Missing type
								|	REC:r IDENTIFIER COLON:c DOT seq_expr
									{: Error.expect("Recursion", " \u03C4", rleft, cright, "\u03C4" ); :}
								;

let_rec							::= LET:l REC IDENTIFIER:id EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new LetRec(new Identifier (id,idleft,idright), null, e1, e2, lleft, e2right); :}
								|	LET:l REC IDENTIFIER:id COLON type:tau EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new LetRec(new Identifier (id,idleft,idright), tau, e1, e2, lleft, e2right); :}
								|	let_rec_error
									{: :}				
								;

let_rec_error					::= LET:l REC:r epsilon
									{: Error.expect("Let-Rec", " id = e1 in e2", lleft, rright, "id = e<sub>1</sub> in e<sub>2</sub>", "id: \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER:i epsilon
									{: Error.expect("Let-Rec", " = e1 in e2", lleft, iright, "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	LET:l REC IDENTIFIER COLON:c epsilon
									{: Error.expect("Let-Rec", " \u03C4 = e1 in e2", lleft, cright, "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}	
								|	LET:l REC IDENTIFIER COLON type:t epsilon
									{: Error.expect("Let-Rec", " = e1 in e2", lleft, tright, "= e<sub>1</sub> in e<sub>2</sub>" ); :}			
								|	LET:l REC IDENTIFIER COLON type EQUAL:e epsilon
									{: Error.expect("Let-Rec", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER COLON type EQUAL seq_expr:e epsilon
									{: Error.expect("Let-Rec", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER COLON type EQUAL seq_expr IN:i epsilon
									{: Error.expect("Let-Rec", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER EQUAL:e epsilon
									{: Error.expect("Let-Rec", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER EQUAL seq_expr:e epsilon
									{: Error.expect("Let-Rec", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER EQUAL seq_expr IN:i epsilon
									{: Error.expect("Let-Rec", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								// Missing type
								|	LET:l REC IDENTIFIER COLON:c EQUAL seq_expr IN seq_expr
									{: Error.expect("Let-Rec", " \u03C4", lleft, cright, "\u03C4" ); :}
								;

curried_let_rec					::=	LET:l REC IDENTIFIER:id curried_let_rec_list:itl EQUAL seq_expr:e1 IN seq_expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].getId();
									     types[n + 1] = itl[n].getTau();
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   RESULT = new CurriedLetRec(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET:l REC IDENTIFIER:id curried_let_rec_list:itl COLON type:tau EQUAL seq_expr:e1 IN seq_expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].getId();
									     types[n + 1] = itl[n].getTau();
									   }
									   identifiers[0] = new Identifier (id,idleft,idright);
									   types[0] = tau;
									   RESULT = new CurriedLetRec(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	curried_let_rec_error
									{: :}
								;

curried_let_rec_error			::= LET:l REC IDENTIFIER curried_let_rec_list:c epsilon
									{: Error.expect("Curried-Let-Rec", " = e1 in e2", lleft, cright, "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list COLON:c epsilon
									{: Error.expect("Curried-Let-Rec", " \u03C4 = e1 in e2", lleft, cright, "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list COLON type:t epsilon
									{: Error.expect("Curried-Let-Rec", " = e1 in e2", lleft, tright, "= e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list COLON type EQUAL:e epsilon
									{: Error.expect("Curried-Let-Rec", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list COLON type EQUAL seq_expr:e epsilon
									{: Error.expect("Curried-Let-Rec", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list COLON type EQUAL seq_expr IN:i epsilon
									{: Error.expect("Curried-Let-Rec", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list EQUAL:e epsilon
									{: Error.expect("Curried-Let-Rec", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list EQUAL seq_expr:e epsilon
									{: Error.expect("Curried-Let-Rec", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l REC IDENTIFIER curried_let_rec_list EQUAL seq_expr IN:i epsilon
									{: Error.expect("Curried-Let-Rec", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								// Missing type
								|	LET:l REC IDENTIFIER curried_let_rec_list:itl COLON:c EQUAL seq_expr IN seq_expr
									{: Error.expect("Curried-Let-Rec", " \u03C4 ", lleft, cright, "\u03C4" ); :}
								;

curried_let_rec_list			::= curried_let_rec_list:l curried_let_rec_pair:p
									{: 
									   RESULT = new IdentifierTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = p;
									:}
								|	curried_let_rec_pair:p
									{: RESULT = new IdentifierTypePair[] { p }; :}
								;

curried_let_rec_pair			::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdentifierTypePair(new Identifier (id,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdentifierTypePair(new Identifier (id,idleft,idright), null); :}
								|	curried_let_rec_pair_error
									{: :}
								;

curried_let_rec_pair_error		::= LPAREN:l epsilon
									{: Error.expect("Curried-Let-Rec", "id: \u03C4)", lleft, lright, "id: \u03C4)" ); :}
								|	LPAREN:l IDENTIFIER:i epsilon
									{: Error.expect("Curried-Let-Rec", ": \u03C4)", lleft, iright, ": \u03C4)" ); :}
								|	LPAREN:l IDENTIFIER COLON:c epsilon
									{: Error.expect("Curried-Let-Rec", " \u03C4)", lleft, cright, "\u03C4)" ); :}
								|	LPAREN:l IDENTIFIER COLON type:t epsilon
									{: Error.expect("Curried-Let-Rec", ")", lleft, tright, ")" ); :}
								// Missing type
								|	LPAREN:l IDENTIFIER COLON:c RPAREN
									{: Error.expect("Curried-Let-Rec", " \u03C4", lleft, cright, "\u03C4" ); :}
								;

multi_lambda					::= LAMBDA:l LPAREN multi_lambda_list:il RPAREN DOT seq_expr:e
									{: RESULT = new MultiLambda(il, null, e, lleft, eright); :}
								|	LAMBDA:l LPAREN multi_lambda_list:il RPAREN COLON type:tau DOT seq_expr:e
									{: RESULT = new MultiLambda(il, tau, e, lleft, eright); :}
								|	multi_lambda_error
									{: :}
								;

multi_lambda_error				::=	LAMBDA:l LPAREN:lp epsilon
									{: Error.expect("Multi-Lambda", "id1, id2).e", lleft, lpright, "id<sub>1</sub>, ... ,id<sub>n</sub>).e", "id<sub>1</sub>, ... ,id<sub>n</sub>): \u03C4.e" ); :}
								|	LAMBDA:l LPAREN multi_lambda_list:m epsilon
									{: Error.expect("Multi-Lambda", ").e", lleft, mright, ").e", "): \u03C4.e" ); :}
								|	LAMBDA:l LPAREN multi_lambda_list RPAREN:r epsilon
									{: Error.expect("Multi-Lambda", ".e", lleft, rright, ".e", ": \u03C4.e" ); :}
								|	LAMBDA:l LPAREN multi_lambda_list RPAREN COLON:c epsilon
									{: Error.expect("Multi-Lambda", " \u03C4.e", lleft, cright, "\u03C4.e" ); :}
								|	LAMBDA:l LPAREN multi_lambda_list RPAREN COLON type:t epsilon
									{: Error.expect("Multi-Lambda", ".e", lleft, tright, ".e" ); :}
								|	LAMBDA:l LPAREN multi_lambda_list RPAREN COLON type DOT:d epsilon
									{: Error.expect("Multi-Lambda", "e", lleft, dright, "e" ); :}
								|	LAMBDA:l LPAREN multi_lambda_list RPAREN DOT:d epsilon
									{: Error.expect("Multi-Lambda", "e", lleft, dright, "e" ); :}
								// Missing type
								|	LAMBDA:l LPAREN multi_lambda_list RPAREN COLON:c DOT seq_expr
									{: Error.expect("Multi-Lambda", " \u03C4", lleft, cright, "\u03C4" ); :}
								;

multi_lambda_list				::=	multi_lambda_list:l COMMA IDENTIFIER:id
									{:
									   RESULT = new Identifier[l.length + 1];
						   			   System.arraycopy(l, 0, RESULT, 0, l.length);
						   			   RESULT[l.length] = new Identifier(id,idleft,idright);
						   			:}
								|	IDENTIFIER:id
									{: RESULT = new Identifier[] { new Identifier(id,idleft,idright) }; :}
								|	multi_lambda_list_error
						   			{: :}
								;

multi_lambda_list_error			::=	multi_lambda_list:m COMMA:c epsilon
									{: Error.expect("Multi-Lambda", " id).e", mleft, cright, "id<sub>i</sub>, ... ,id<sub>n</sub>).e", "id<sub>i</sub>, ... ,id<sub>n</sub>): \u03C4.e"); :}
								;

multi_let						::= LET:l LPAREN multi_let_list:il RPAREN EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new MultiLet(il, null, e1, e2, lleft, e2right); :}
								|	LET:l LPAREN multi_let_list:il RPAREN COLON type:tau EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new MultiLet(il, tau, e1, e2, lleft, e2right); :}
								|	multi_let_error
									{: :}
								;

multi_let_error					::= LET:l LPAREN:lp epsilon
									{: Error.expect("Multi-Let", "id1, id2) = e1 in e2", lleft, lpright, "id<sub>1</sub>, ... ,id<sub>n</sub>) = e<sub>1</sub> in e<sub>2</sub>", "id<sub>1</sub>, ... ,id<sub>n</sub>): \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|   LET:l LPAREN multi_let_list:m epsilon
									{: Error.expect("Multi-Let", ") = e1 in e2", lleft, mright, ") = e<sub>1</sub> in e<sub>2</sub>", "): \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l LPAREN multi_let_list RPAREN:r epsilon
									{: Error.expect("Multi-Let", " = e1 in e2", lleft, rright, "= e<sub>1</sub> in e<sub>2</sub>", ": \u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l LPAREN multi_let_list RPAREN COLON:c epsilon
									{: Error.expect("Multi-Let", " \u03C4 = e1 in e2", lleft, cright, "\u03C4 = e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l LPAREN multi_let_list RPAREN COLON type:t epsilon
									{: Error.expect("Multi-Let", " = e1 in e2", lleft, tright, "= e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l LPAREN multi_let_list RPAREN COLON type EQUAL:e epsilon
									{: Error.expect("Multi-Let", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l LPAREN multi_let_list RPAREN COLON type EQUAL seq_expr:e epsilon
									{: Error.expect("Multi-Let", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}
								|	LET:l LPAREN multi_let_list RPAREN COLON type EQUAL seq_expr IN:i epsilon
									{: Error.expect("Multi-Let", " e2", lleft, iright, "e<sub>2</sub>" ); :}									
								|	LET:l LPAREN multi_let_list RPAREN EQUAL:e epsilon
									{: Error.expect("Multi-Let", " e1 in e2", lleft, eright, "e<sub>1</sub> in e<sub>2</sub>" ); :}
								|	LET:l LPAREN multi_let_list RPAREN EQUAL seq_expr:e epsilon
									{: Error.expect("Multi-Let", " in e2", lleft, eright, "in e<sub>2</sub>" ); :}	
								|	LET:l LPAREN multi_let_list RPAREN EQUAL seq_expr IN:i epsilon
									{: Error.expect("Multi-Let", " e2", lleft, iright, "e<sub>2</sub>" ); :}
								// Missing type
								|	LET:l LPAREN multi_let_list RPAREN COLON:c EQUAL seq_expr IN seq_expr
									{: Error.expect("Multi-Let", " \u03C4 ", lleft, cright, "\u03C4" ); :}
								;

multi_let_list					::=	multi_let_list:l COMMA IDENTIFIER:id
									{:
									   RESULT = new Identifier[l.length + 1];
						   			   System.arraycopy(l, 0, RESULT, 0, l.length);
						   			   RESULT[l.length] = new Identifier(id,idleft,idright);
						   			:}
								|	IDENTIFIER:id
									{: RESULT = new Identifier[] { new Identifier(id,idleft,idright) }; :}
								|	multi_let_list_error
						   			{: :}
								;

multi_let_list_error			::=	multi_let_list:m COMMA:c epsilon
									{: Error.expect("Multi-Let", " id) = e1 in e2", mleft, cright, "id<sub>i</sub>, ... ,id<sub>n</sub>) = e<sub>1</sub> in e<sub>2</sub>", "id<sub>i</sub>, ... ,id<sub>n</sub>): \u03C4 = e<sub>1</sub> in e<sub>2</sub>"); :}
								;

while							::=	WHILE:w seq_expr:e1 DO seq_expr:e2
									{: RESULT = new While(e1, e2, wleft, e2right); :}
								|	while_error
									{: :}
								;

while_error						::= WHILE:w epsilon
									{: Error.expect("While", " e1 do e2", wleft, wright, "e<sub>1</sub> do e<sub>2</sub>" ); :}
								|	WHILE:w seq_expr:e1 epsilon
									{: Error.expect("While", " do e2", wleft, e1right, "do e<sub>2</sub>" ); :}
								|	WHILE:w seq_expr DO:d epsilon
									{: Error.expect("While", " e2", wleft, dright, "e<sub>2</sub>" ); :}
								;

constant						::=	unit_constant:u
									{: RESULT = u; :}
								|	boolean_constant:b
									{: RESULT = b; :}
								|	integer_constant:i
									{: RESULT = i; :}
								|	not:n
									{: RESULT = n; :}
								|	fst:f
									{: RESULT = f; :}
								|	snd:s
									{: RESULT = s; :}
								|	unary_cons:u
									{: RESULT = u; :}
								|	is_empty:i
									{: RESULT = i; :}
								|	hd:h
									{: RESULT = h; :}
								|	tl:t
									{: RESULT = t; :}
								|	empty_list:e
									{: RESULT = e; :}
								|	projection:p
									{: RESULT = p; :}
								|	deref:d
									{: RESULT = d; :}
								|	ref:r
									{: RESULT = r; :}
								;

unit_constant					::= PARENPAREN:u
									{: RESULT = new UnitConstant(uleft, uright); :}
								;

boolean_constant				::= TRUE:t
									{: RESULT = new BooleanConstant(true, tleft, tright); :}
								|	FALSE:f
									{: RESULT = new BooleanConstant(false, fleft, fright); :}
								;

integer_constant				::= NUMBER:n
									{: RESULT = new IntegerConstant(n.intValue(), nleft, nright); :}
								;

not								::= NOT:n
									{: RESULT = new Not(nleft, nright); :}
								;

fst								::= FST:f
									{: RESULT = new Fst(fleft, fright); :}
								;

snd								::= SND:s
									{: RESULT = new Snd(sleft, sright); :}
								;

unary_cons						::= CONS:c
									{: RESULT = new UnaryCons(cleft, cright); :}
								;

is_empty						::= IS_EMPTY:i
									{: RESULT = new IsEmpty(ileft, iright); :}
								;

hd								::= HD:h
									{: RESULT = new Hd(hleft, hright); :}
								;

tl								::= TL:t
									{: RESULT = new Tl(tleft, tright); :}
								;

empty_list						::=	BRACKETBRACKET:b
								    {: RESULT = new EmptyList(bleft, bright); :}
								;

projection						::=	PROJECTION:p
									{: RESULT = new Projection(p[0], p[1], p[2], p[3], p[4], p[5], pleft, pright); :}
								;

deref							::=	EXCLAMATION:e
									{: RESULT = new Deref(eleft, eright); :}
								;

ref								::=	REF:r
									{: RESULT = new Ref(rleft, rright); :}
								;

operator						::=	arithmetic_operator:a
									{: RESULT = a; :}
								|	relational_operator:r
									{: RESULT = r; :}
								|	binary_cons:b
									{: RESULT = b; :}
								|	assign:a
									{: RESULT = a; :}
								;

arithmetic_operator				::= PLUS:op		
									{: RESULT = ArithmeticOperator.newPlus(opleft, opright); :}
								|	MINUS:op		
									{: RESULT = ArithmeticOperator.newMinus(opleft, opright); :}
								|	STAR:op			
									{: RESULT = ArithmeticOperator.newMult(opleft, opright); :}
								|	SLASH:op			
									{: RESULT = ArithmeticOperator.newDiv(opleft, opright); :}
								|	MOD:op			
									{: RESULT = ArithmeticOperator.newMod(opleft, opright); :}
								;

relational_operator				::= EQUAL:op			
									{: RESULT = RelationalOperator.newEquals(opleft, opright); :}
								|	LESS:op			
									{: RESULT = RelationalOperator.newLowerThan(opleft, opright); :}
								|	GREATER:op		
									{: RESULT = RelationalOperator.newGreaterThan(opleft, opright); :}
								|	LESSEQUAL:op		
									{: RESULT = RelationalOperator.newLowerEqual(opleft, opright); :}
								|	GREATEREQUAL:op
									{: RESULT = RelationalOperator.newGreaterEqual(opleft, opright); :}
								;

binary_cons						::=	COLONCOLON:op
					    			{: RESULT = new BinaryCons(opleft, opright); :}
					    		;

assign							::=	COLONEQUAL:op
									{: RESULT = new Assign(opleft, opright); :}
								;

tuple							::=	LPAREN:l tuple_list:e RPAREN:r
									{: RESULT = new Tuple(e, lleft, rright); :}
								|	tuple_error
									{: :}
								;

tuple_error						::= LPAREN:l tuple_list:t epsilon
									{: Error.expect("Tuple", ")", lleft, tright, ")"); :}
								;

tuple_list						::=	tuple_list:el COMMA seq_expr:e
									{:
									   RESULT = new Expression[el.length + 1];
						   			   System.arraycopy(el, 0, RESULT, 0, el.length);
						   			   RESULT[el.length] = e;
						   			:}
								|	seq_expr:e1 COMMA seq_expr:e2
									{: RESULT = new Expression[] { e1, e2 }; :}
								|	tuple_list_error
									{: :}
								;

tuple_list_error				::=	tuple_list:t COMMA:c epsilon
									{: Error.expect("Tuple", " e)", tleft, cright, "e<sub>i</sub>, ... ,e<sub>n</sub>)"); :}
								|	seq_expr:e COMMA:c epsilon
									{: Error.expect("Tuple", " e)", eleft, cright, "e<sub>i</sub>, ... ,e<sub>n</sub>)"); :}
								;

list							::=	LBRACKET:l list_list:e RBRACKET:r
									{: RESULT = new List(e, lleft, rright); :}
								|	list_error
									{: :}
								;

list_error						::= LBRACKET:l epsilon
									{: Error.expect("List", "e]", lleft, lright, "e<sub>1</sub>; ... ;e<sub>n</sub>]"); :}
								|	LBRACKET:l list_list:li epsilon
									{: Error.expect("List", "]", lleft, liright, "]"); :}
								;

list_list						::=	expr:e
									{: RESULT = new Expression[] { e }; :}
								|	list_list:el SEMI expr:e
									{:
									   RESULT = new Expression[el.length + 1];
									   System.arraycopy(el, 0, RESULT, 0, el.length);
						   			   RESULT[el.length] = e;
						   			:}
						   		|	list_list_error
						   			{: :}
								;

list_list_error					::=	list_list:l SEMI:s epsilon
									{: Error.expect("List", " e]", lleft, sright, "e<sub>i</sub>; ... ;e<sub>n</sub>]"); :}
								;

simple_expr						::=	constant:c
									{: RESULT = c; :}
								|	identifier:id
									{: RESULT = id; :}
								|	LPAREN operator:o RPAREN
									{: RESULT = o; :}
								|	LPAREN seq_expr:e RPAREN
									{: RESULT = e; :}
								|	tuple:t
									{: RESULT = t; :}									
								|	list:l
									{: RESULT = l; :}
								|	simple_expr_error
									{: :}
								;

simple_expr_error				::= LPAREN:l seq_expr:e epsilon
									{: Error.expect("Expression", ")", lleft, eright, ")"); :}
								|	LPAREN:l operator:o epsilon
									{: Error.expect("Operator", ")", lleft, oright, ")"); :}
								|	LPAREN:l epsilon
									{: Error.expect("Expression", "e)", lleft, lright, "... )"); :}
								;

simple_expr_list				::=	simple_expr:e
									{: RESULT = new Expression[] { e }; :}
								|	simple_expr_list:l simple_expr:e
									{:
									   RESULT = new Expression[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 0, l.length);
									   RESULT[l.length] = e;
									:}
								;

epsilon							::= /* epsilon */
									{: :}	
								;


/*********
 * Types *
 *********/


type							::=	simple_type:t
									{: RESULT = t; :}
								|	arrow_type:a
									{: RESULT = a; :}
								|	tuple_type:t
									{: RESULT = t; :}
								|	list_type:l
									{: RESULT = l; :}
								|	ref_type:r
									{: RESULT = r; :}
								;

simple_type						::=	LPAREN:l type:t RPAREN:r
									{: RESULT = t; :}
								|	boolean_type:b
									{: RESULT = b; :}
								|	integer_type:i
									{: RESULT = i; :}
								|	unit_type:u
									{: RESULT = u; :}
								|	type_variable:t
									{: RESULT = t; :}
								|	type_name:t
									{: RESULT = t; :}
								|	rec_type:r
									{: RESULT = r; :}
								|	simple_type_error
									{: :}
								;

simple_type_error				::= LPAREN:l epsilon
									{: Error.expect("Type", "\u03C4)", lleft, lright, "\u03C4)"); :}
								|	LPAREN:l type:t epsilon
									{: Error.expect("Type", ")", lleft, tright, ")"); :}
								;

arrow_type						::= type:t1 ARROW type:t2
									{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
								|	arrow_type_error
									{: :}
								;

arrow_type_error				::= type:t ARROW:a epsilon 
									{: Error.expect("Arrow-Type", " \u03C4", tleft, aright, "\u03C4<sub>2</sub>"); :}
								;

boolean_type					::= BOOL:b
									{: RESULT = new BooleanType(bleft, bright); :}
								;

integer_type					::= INT:i
									{: RESULT = new IntegerType(ileft, iright); :}
								;

unit_type						::= UNIT:u
									{: RESULT = new UnitType(uleft, uright); :}
								;

type_variable					::= TYPEVARIABLE:t
									{: RESULT = new TypeVariable(0, t, tleft, tright); :}
								;

type_name						::= IDENTIFIER:id
									{: RESULT = new TypeName(id, idleft, idright); :}
								;

rec_type						::= MU:m IDENTIFIER:id DOT type:t
									{: RESULT = new RecType(new TypeName(id, idleft, idright), t, mleft, tright); :}
								|	rec_type_error
									{: :}								
								;

rec_type_error					::= MU:m epsilon
									{: Error.expect("Rec-Type", " t.\u03C4", mleft, mright, "t.\u03C4"); :}
								|	MU:m IDENTIFIER:i epsilon
									{: Error.expect("Rec-Type", ".\u03C4", mleft, iright, ".\u03C4"); :}
								|	MU:m IDENTIFIER DOT:d epsilon
									{: Error.expect("Rec-Type", "\u03C4", mleft, dright, "\u03C4"); :}
								;

tuple_type						::= tuple_type_list:t
									{: RESULT = new TupleType(t, tleft, tright); :}
								;

tuple_type_list					::= tuple_type_list:tl STAR type:t
									{:
									   RESULT = new MonoType[tl.length + 1];
									   System.arraycopy(tl, 0, RESULT, 0, tl.length);
									   RESULT[tl.length] = t;
									:}
								|	type:t1 STAR type:t2
									{: RESULT = new MonoType[] { t1, t2 }; :}
								|	tuple_type_list_error
									{: :}
								;

tuple_type_list_error			::= tuple_type_list:t STAR:s epsilon
									{: Error.expect("Tuple-Type", " \u03C4", tleft, sright, "\u03C4"); :}
								|	type:t STAR:s epsilon
									{: Error.expect("Tuple-Type", " \u03C4", tleft, sright, "\u03C4"); :}
								;

list_type						::=	type:t LIST:l
									{: RESULT = new ListType(t, tleft, lright); :}
								;

ref_type						::=	type:t REF
									{: RESULT = new RefType(t); :}
								;