import de.unisiegen.tpml.core.expressions.*;
import de.unisiegen.tpml.core.types.*;


/* Helper class */
action code {:
  private static class IdTypePair 
  {
    public IdTypePair(Identifier id, MonoType tau) 
    { 
      this.id = id; 
      this.tau = tau; 
    }
    Identifier id;
    MonoType tau;
  }
:}


/* Binary operators */
terminal			PLUS, MINUS, STAR, SLASH, MOD;
terminal			EQUAL, LESS, GREATER, LESSEQUAL, GREATEREQUAL;

/* Logical operators */
terminal			AMPERAMPER, BARBAR;
terminal			NOT;

/* Syntactic tokens */
terminal			ARROW, COLON, DOT;
terminal			LPAREN, RPAREN;
terminal			PARENPAREN;

/* Keywords */
terminal			LAMBDA, LET, IN, IF, THEN, ELSE;
terminal			TRUE, FALSE;

/* Types */
terminal			BOOL, INT, UNIT;

/* Special tokens */
terminal Integer	NUMBER;
terminal Integer	TYPEVARIABLE;
terminal String		IDENTIFIER;
terminal			COMMENT;


/* Non-Terminals */
non terminal Expression		expr;
non terminal Expression		simple_expr;
non terminal Expression[]	simple_expr_list;
non terminal Expression		constant;
non terminal Expression		operator;
non terminal IdTypePair[]	id_type_list;		/* list of identifiers and optionally types */
non terminal IdTypePair		id_type_pair;		/* (id:type) or id */
non terminal MonoType		type;
non terminal MonoType		simple_type;


/* Precedences, based on http://caml.inria.fr/pub/docs/manual-ocaml/manual015.html */
precedence right	ARROW;

precedence right	BARBAR;					/* expr (e || e || e) */
precedence right	AMPERAMPER;				/* expr (e && e && e) */

precedence left		EQUAL, LESS, GREATER, LESSEQUAL, GREATEREQUAL;
precedence left		PLUS, MINUS;
precedence left		STAR, SLASH, MOD;



/***************
 * Expressions *
 ***************/


expr				::=	simple_expr:e
						{: RESULT = e; :}
				
					/* Applications */
					|	simple_expr:e simple_expr_list:l
						{: for (int n = 0; n < l.length; ++n) 
						   {
						     e = new Application(e, l[n],
						       e.getParserStartOffset ( ) , 
						       l[n].getParserEndOffset ( ) );
						   }
						   RESULT = e; :}

					/* Infix Operations */
					|	expr:e1 PLUS:op expr:e2
						{: RESULT = new InfixOperation(ArithmeticOperator.newPlus(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 MINUS:op expr:e2
						{: RESULT = new InfixOperation(ArithmeticOperator.newMinus(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 STAR:op expr:e2
						{: RESULT = new InfixOperation(ArithmeticOperator.newMult(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 SLASH:op expr:e2
						{: RESULT = new InfixOperation(ArithmeticOperator.newDiv(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 MOD:op expr:e2
						{: RESULT = new InfixOperation(ArithmeticOperator.newMod(opleft, opright), e1, e2, e1left, e2right); :}

					|	expr:e1 EQUAL:op expr:e2
						{: RESULT = new InfixOperation(RelationalOperator.newEquals(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 LESS:op expr:e2
						{: RESULT = new InfixOperation(RelationalOperator.newLowerThan(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 GREATER:op expr:e2
						{: RESULT = new InfixOperation(RelationalOperator.newGreaterThan(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 LESSEQUAL:op expr:e2
						{: RESULT = new InfixOperation(RelationalOperator.newLowerEqual(opleft, opright), e1, e2, e1left, e2right); :}
					|	expr:e1 GREATEREQUAL:op expr:e2
						{: RESULT = new InfixOperation(RelationalOperator.newGreaterEqual(opleft, opright), e1, e2, e1left, e2right); :}

					/* Logical operators */
					|	expr:e1 AMPERAMPER expr:e2
						{: RESULT = new And(e1, e2, e1left, e2right); :}
					|	expr:e1 BARBAR expr:e2
						{: RESULT = new Or(e1, e2, e1left, e2right); :}

					/* Conditions */
					|	IF:i expr:e0 THEN expr:e1 ELSE expr:e2
						{: RESULT = new Condition(e0, e1, e2, ileft, e2right); :}

					/* Lambda Abstraction */
					|	LAMBDA:l IDENTIFIER:id DOT expr:e
						{: RESULT = new Lambda(new Identifier (id,idleft,idright), null, e, lleft, eright); :}
					|	LAMBDA:l IDENTIFIER:id COLON type:tau DOT expr:e
						{: RESULT = new Lambda(new Identifier (id,idleft,idright), tau, e, lleft, eright); :}

					/* Let */
					|	LET:l IDENTIFIER:id EQUAL expr:e1 IN expr:e2
						{: RESULT = new Let(new Identifier (id,idleft,idright), null, e1, e2, lleft, e2right); :}
					|	LET:l IDENTIFIER:id COLON type:tau EQUAL expr:e1 IN expr:e2
						{: RESULT = new Let(new Identifier (id,idleft,idright), tau, e1, e2, lleft, e2right); :}
					|	LET:l IDENTIFIER:id id_type_list:itl EQUAL expr:e1 IN expr:e2
						{: Identifier[] identifiers = new Identifier[itl.length + 1];
						   MonoType[] types = new MonoType[itl.length + 1];
						   for (int n = 0; n < itl.length; ++n) {
						     identifiers[n + 1] = itl[n].id;
						     types[n + 1] = itl[n].tau;
						   }
						   identifiers[0] = new Identifier (id,idleft,idright);
						   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right); :}
					|	LET:l IDENTIFIER:id id_type_list:itl COLON type:tau EQUAL expr:e1 IN expr:e2
						{: Identifier[] identifiers = new Identifier[itl.length + 1];
						   MonoType[] types = new MonoType[itl.length + 1];
						   for (int n = 0; n < itl.length; ++n) {
						     identifiers[n + 1] = itl[n].id;
						     types[n + 1] = itl[n].tau;
						   }
						   identifiers[0] = new Identifier (id,idleft,idright);
						   types[0] = tau;
						   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right); :}
					;


simple_expr			::=	constant:c
						{: RESULT = c; :}
					|	IDENTIFIER:id
						{: RESULT = new Identifier (id,idleft,idright); :}

					/* Parenthized operators/expressions */
					|	LPAREN operator:o RPAREN
						{: RESULT = o; :}
					|	LPAREN expr:e RPAREN
						{: RESULT = e; :}
					;


/* for applications */
simple_expr_list	::=	simple_expr:e
						{: RESULT = new Expression[] { e }; :}
					|	simple_expr_list:l simple_expr:e
						{: RESULT = new Expression[l.length + 1];
						   System.arraycopy(l, 0, RESULT, 0, l.length);
						   RESULT[l.length] = e; :}
					;


constant			::=	PARENPAREN:c
						{: RESULT = new UnitConstant(cleft, cright); :}
					|	TRUE:c
						{: RESULT = new BooleanConstant(true, cleft, cright); :}
					|	FALSE:c
						{: RESULT = new BooleanConstant(false, cleft, cright); :}
					|	NUMBER:n
						{: RESULT = new IntegerConstant(n.intValue(), nleft, nright); :}
					|	NOT:c
						{: RESULT = new Not(cleft, cright); :}
					;


operator			::=	PLUS:op		
						{: RESULT = ArithmeticOperator.newPlus(opleft, opright); :}
					|	MINUS:op		
						{: RESULT = ArithmeticOperator.newMinus(opleft, opright); :}
					|	STAR:op			
						{: RESULT = ArithmeticOperator.newMult(opleft, opright); :}
					|	SLASH:op			
						{: RESULT = ArithmeticOperator.newDiv(opleft, opright); :}
					|	MOD:op			
						{: RESULT = ArithmeticOperator.newMod(opleft, opright); :}
					|	EQUAL:op			
						{: RESULT = RelationalOperator.newEquals(opleft, opright); :}
					|	LESS:op			
						{: RESULT = RelationalOperator.newLowerThan(opleft, opright); :}
					|	GREATER:op		
						{: RESULT = RelationalOperator.newGreaterThan(opleft, opright); :}
					|	LESSEQUAL:op		
						{: RESULT = RelationalOperator.newLowerEqual(opleft, opright); :}
					|	GREATEREQUAL:op
						{: RESULT = RelationalOperator.newGreaterEqual(opleft, opright); :}
					;


id_type_list		::= id_type_list:l id_type_pair:itp
						{: RESULT = new IdTypePair[l.length + 1];
						   System.arraycopy(l, 0, RESULT, 0, l.length);
						   RESULT[l.length] = itp; :}
					|	id_type_pair:itp
						{: RESULT = new IdTypePair[] { itp }; :}
					;
					

id_type_pair		::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
						{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), tau); :}
					|	IDENTIFIER:id
						{: RESULT = new IdTypePair(new Identifier (id,idleft,idright), null); :}
					;
					
					

/*********
 * Types *
 *********/


type				::=	simple_type:t
						{: RESULT = t; :}
					|	type:t1 ARROW type:t2
						{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
					;


simple_type			::=	LPAREN:l type:t RPAREN:r
						{: RESULT = t; :}
					|	BOOL:b
						{: RESULT = new BooleanType(bleft, bright); :}
					|	INT:i
						{: RESULT = new IntegerType(ileft, iright); :}
					|	UNIT:u
						{: RESULT = new UnitType(uleft, uright); :}
					|	TYPEVARIABLE:tvar
						{: RESULT = new TypeVariable(0, tvar, tvarleft, tvarright); :}
					;