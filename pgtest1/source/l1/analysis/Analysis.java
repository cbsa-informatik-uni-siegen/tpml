/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.analysis;

import l1.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAApplicationExpression(AApplicationExpression node);
    void caseAConditionExpression(AConditionExpression node);
    void caseALetExpression(ALetExpression node);
    void caseAAbstractionExpression(AAbstractionExpression node);
    void caseARecursionExpression(ARecursionExpression node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubstractionExpression(ASubstractionExpression node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseADivisionExpression(ADivisionExpression node);
    void caseAModulationExpression(AModulationExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAUnitExpression(AUnitExpression node);
    void caseATrueExpression(ATrueExpression node);
    void caseAFalseExpression(AFalseExpression node);
    void caseANumberExpression(ANumberExpression node);
    void caseAPlusExpression(APlusExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAMultiplyExpression(AMultiplyExpression node);
    void caseADivideExpression(ADivideExpression node);
    void caseAModuloExpression(AModuloExpression node);
    void caseALowerThanExpression(ALowerThanExpression node);
    void caseAGreaterThanExpression(AGreaterThanExpression node);
    void caseALowerEqualExpression(ALowerEqualExpression node);
    void caseAGreaterEqualExpression(AGreaterEqualExpression node);
    void caseAEqualExpression(AEqualExpression node);

    void caseTBlank(TBlank node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMultiply(TMultiply node);
    void caseTDivide(TDivide node);
    void caseTModulo(TModulo node);
    void caseTLowerThan(TLowerThan node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTLowerEqual(TLowerEqual node);
    void caseTGreaterEqual(TGreaterEqual node);
    void caseTEqual(TEqual node);
    void caseTLeftParen(TLeftParen node);
    void caseTRightParen(TRightParen node);
    void caseTDot(TDot node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTLambda(TLambda node);
    void caseTLet(TLet node);
    void caseTIn(TIn node);
    void caseTRec(TRec node);
    void caseTUnit(TUnit node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTNumber(TNumber node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
}
