/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.node;

import java.util.*;
import l1.analysis.*;

public final class AGreaterThanExpression extends PExpression
{
    private TGreaterThan _greaterThan_;

    public AGreaterThanExpression()
    {
    }

    public AGreaterThanExpression(
        TGreaterThan _greaterThan_)
    {
        setGreaterThan(_greaterThan_);

    }
    public Object clone()
    {
        return new AGreaterThanExpression(
            (TGreaterThan) cloneNode(_greaterThan_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGreaterThanExpression(this);
    }

    public TGreaterThan getGreaterThan()
    {
        return _greaterThan_;
    }

    public void setGreaterThan(TGreaterThan node)
    {
        if(_greaterThan_ != null)
        {
            _greaterThan_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _greaterThan_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_greaterThan_);
    }

    void removeChild(Node child)
    {
        if(_greaterThan_ == child)
        {
            _greaterThan_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_greaterThan_ == oldChild)
        {
            setGreaterThan((TGreaterThan) newChild);
            return;
        }

    }
}
