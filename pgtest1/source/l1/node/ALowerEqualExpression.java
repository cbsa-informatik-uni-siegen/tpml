/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.node;

import java.util.*;
import l1.analysis.*;

public final class ALowerEqualExpression extends PExpression
{
    private TLowerEqual _lowerEqual_;

    public ALowerEqualExpression()
    {
    }

    public ALowerEqualExpression(
        TLowerEqual _lowerEqual_)
    {
        setLowerEqual(_lowerEqual_);

    }
    public Object clone()
    {
        return new ALowerEqualExpression(
            (TLowerEqual) cloneNode(_lowerEqual_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALowerEqualExpression(this);
    }

    public TLowerEqual getLowerEqual()
    {
        return _lowerEqual_;
    }

    public void setLowerEqual(TLowerEqual node)
    {
        if(_lowerEqual_ != null)
        {
            _lowerEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lowerEqual_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lowerEqual_);
    }

    void removeChild(Node child)
    {
        if(_lowerEqual_ == child)
        {
            _lowerEqual_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lowerEqual_ == oldChild)
        {
            setLowerEqual((TLowerEqual) newChild);
            return;
        }

    }
}
