/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.node;

import java.util.*;
import l1.analysis.*;

public final class AAbstractionExpression extends PExpression
{
    private TIdentifier _id_;
    private PExpression _e_;

    public AAbstractionExpression()
    {
    }

    public AAbstractionExpression(
        TIdentifier _id_,
        PExpression _e_)
    {
        setId(_id_);

        setE(_e_);

    }
    public Object clone()
    {
        return new AAbstractionExpression(
            (TIdentifier) cloneNode(_id_),
            (PExpression) cloneNode(_e_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAbstractionExpression(this);
    }

    public TIdentifier getId()
    {
        return _id_;
    }

    public void setId(TIdentifier node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public PExpression getE()
    {
        return _e_;
    }

    public void setE(PExpression node)
    {
        if(_e_ != null)
        {
            _e_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _e_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_e_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_e_ == child)
        {
            _e_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TIdentifier) newChild);
            return;
        }

        if(_e_ == oldChild)
        {
            setE((PExpression) newChild);
            return;
        }

    }
}
