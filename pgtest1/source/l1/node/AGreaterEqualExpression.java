/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.node;

import java.util.*;
import l1.analysis.*;

public final class AGreaterEqualExpression extends PExpression
{
    private TGreaterEqual _greaterEqual_;

    public AGreaterEqualExpression()
    {
    }

    public AGreaterEqualExpression(
        TGreaterEqual _greaterEqual_)
    {
        setGreaterEqual(_greaterEqual_);

    }
    public Object clone()
    {
        return new AGreaterEqualExpression(
            (TGreaterEqual) cloneNode(_greaterEqual_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGreaterEqualExpression(this);
    }

    public TGreaterEqual getGreaterEqual()
    {
        return _greaterEqual_;
    }

    public void setGreaterEqual(TGreaterEqual node)
    {
        if(_greaterEqual_ != null)
        {
            _greaterEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _greaterEqual_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_greaterEqual_);
    }

    void removeChild(Node child)
    {
        if(_greaterEqual_ == child)
        {
            _greaterEqual_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_greaterEqual_ == oldChild)
        {
            setGreaterEqual((TGreaterEqual) newChild);
            return;
        }

    }
}
