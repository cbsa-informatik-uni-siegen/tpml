/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.node;

import java.util.*;
import l1.analysis.*;

public final class ALowerThanExpression extends PExpression
{
    private TLowerThan _lowerThan_;

    public ALowerThanExpression()
    {
    }

    public ALowerThanExpression(
        TLowerThan _lowerThan_)
    {
        setLowerThan(_lowerThan_);

    }
    public Object clone()
    {
        return new ALowerThanExpression(
            (TLowerThan) cloneNode(_lowerThan_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALowerThanExpression(this);
    }

    public TLowerThan getLowerThan()
    {
        return _lowerThan_;
    }

    public void setLowerThan(TLowerThan node)
    {
        if(_lowerThan_ != null)
        {
            _lowerThan_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lowerThan_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lowerThan_);
    }

    void removeChild(Node child)
    {
        if(_lowerThan_ == child)
        {
            _lowerThan_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lowerThan_ == oldChild)
        {
            setLowerThan((TLowerThan) newChild);
            return;
        }

    }
}
