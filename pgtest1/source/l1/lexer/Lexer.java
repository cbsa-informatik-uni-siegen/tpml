/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.lexer;

import java.io.*;
import java.util.*;
import l1.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new1(int line, int pos) { return new TPlus(line, pos); }
    Token new2(int line, int pos) { return new TMinus(line, pos); }
    Token new3(int line, int pos) { return new TMultiply(line, pos); }
    Token new4(int line, int pos) { return new TDivide(line, pos); }
    Token new5(int line, int pos) { return new TModulo(line, pos); }
    Token new6(int line, int pos) { return new TLowerThan(line, pos); }
    Token new7(int line, int pos) { return new TGreaterThan(line, pos); }
    Token new8(int line, int pos) { return new TLowerEqual(line, pos); }
    Token new9(int line, int pos) { return new TGreaterEqual(line, pos); }
    Token new10(int line, int pos) { return new TEqual(line, pos); }
    Token new11(int line, int pos) { return new TLeftParen(line, pos); }
    Token new12(int line, int pos) { return new TRightParen(line, pos); }
    Token new13(int line, int pos) { return new TDot(line, pos); }
    Token new14(int line, int pos) { return new TIf(line, pos); }
    Token new15(int line, int pos) { return new TThen(line, pos); }
    Token new16(int line, int pos) { return new TElse(line, pos); }
    Token new17(int line, int pos) { return new TLambda(line, pos); }
    Token new18(int line, int pos) { return new TLet(line, pos); }
    Token new19(int line, int pos) { return new TIn(line, pos); }
    Token new20(int line, int pos) { return new TUnit(line, pos); }
    Token new21(int line, int pos) { return new TTrue(line, pos); }
    Token new22(int line, int pos) { return new TFalse(line, pos); }
    Token new23(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TIdentifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{10, 10, 1}, {13, 13, 2}, {32, 32, 3}, {40, 40, 4}, {41, 41, 5}, {42, 42, 6}, {43, 43, 7}, {45, 45, 8}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {60, 60, 12}, {61, 61, 13}, {62, 62, 14}, {65, 90, 15}, {97, 100, 15}, {101, 101, 16}, {102, 102, 17}, {103, 104, 15}, {105, 105, 18}, {106, 107, 15}, {108, 108, 19}, {109, 109, 20}, {110, 115, 15}, {116, 116, 21}, {117, 122, 15}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{41, 41, 22}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 11}, },
            {{61, 61, 23}, },
            {},
            {{61, 61, 24}, },
            {{48, 57, 25}, {65, 90, 26}, {97, 122, 26}, },
            {{48, 90, -17}, {97, 107, 26}, {108, 108, 27}, {109, 122, 26}, },
            {{48, 90, -17}, {97, 97, 28}, {98, 122, 26}, },
            {{48, 90, -17}, {97, 101, 26}, {102, 102, 29}, {103, 109, 26}, {110, 110, 30}, {111, 122, 26}, },
            {{48, 90, -17}, {97, 97, 31}, {98, 100, 26}, {101, 101, 32}, {102, 122, 26}, },
            {{48, 90, -17}, {97, 110, 26}, {111, 111, 33}, {112, 122, 26}, },
            {{48, 90, -17}, {97, 103, 26}, {104, 104, 34}, {105, 113, 26}, {114, 114, 35}, {115, 122, 26}, },
            {},
            {},
            {},
            {{48, 122, -17}, },
            {{48, 122, -17}, },
            {{48, 90, -17}, {97, 114, 26}, {115, 115, 36}, {116, 122, 26}, },
            {{48, 107, -18}, {108, 108, 37}, {109, 122, 26}, },
            {{48, 122, -17}, },
            {{48, 122, -17}, },
            {{48, 90, -17}, {97, 108, 26}, {109, 109, 38}, {110, 122, 26}, },
            {{48, 90, -17}, {97, 115, 26}, {116, 116, 39}, {117, 122, 26}, },
            {{48, 90, -17}, {97, 99, 26}, {100, 100, 40}, {101, 122, 26}, },
            {{48, 90, -17}, {97, 100, 26}, {101, 101, 41}, {102, 122, 26}, },
            {{48, 90, -17}, {97, 116, 26}, {117, 117, 42}, {118, 122, 26}, },
            {{48, 100, -36}, {101, 101, 43}, {102, 122, 26}, },
            {{48, 114, -29}, {115, 115, 44}, {116, 122, 26}, },
            {{48, 90, -17}, {97, 97, 26}, {98, 98, 45}, {99, 122, 26}, },
            {{48, 122, -17}, },
            {{48, 122, -17}, },
            {{48, 90, -17}, {97, 109, 26}, {110, 110, 46}, {111, 122, 26}, },
            {{48, 100, -36}, {101, 101, 47}, {102, 122, 26}, },
            {{48, 122, -17}, },
            {{48, 100, -36}, {101, 101, 48}, {102, 122, 26}, },
            {{48, 99, -35}, {100, 100, 49}, {101, 122, 26}, },
            {{48, 122, -17}, },
            {{48, 122, -17}, },
            {{48, 122, -17}, },
            {{48, 90, -17}, {97, 97, 50}, {98, 122, 26}, },
            {{48, 122, -17}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 11, 12, 3, 1, 2, 13, 4, 23, 6, 10, 7, 24, 24, 24, 24, 24, 24, 24, 20, 8, 9, 24, 24, 24, 24, 14, 19, 24, 24, 24, 24, 24, 24, 24, 24, 18, 5, 24, 24, 16, 24, 24, 15, 21, 22, 24, 17, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
