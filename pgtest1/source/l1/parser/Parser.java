/* This file was generated by SableCC (http://www.sablecc.org/). */

package l1.parser;

import l1.lexer.*;
import l1.node.*;
import l1.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: /* reduce ATermExpression */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AConditionExpression */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce ALetExpression */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAbstractionExpression */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce ARecursionExpression */
		    {
			ArrayList list = new4();
			push(goTo(0), list);
		    }
		    break;
                    case 5: /* reduce AFactorTerm */
		    {
			ArrayList list = new5();
			push(goTo(1), list);
		    }
		    break;
                    case 6: /* reduce AAdditionTerm */
		    {
			ArrayList list = new6();
			push(goTo(1), list);
		    }
		    break;
                    case 7: /* reduce ASubstractionTerm */
		    {
			ArrayList list = new7();
			push(goTo(1), list);
		    }
		    break;
                    case 8: /* reduce AApplicationFactor */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce AMultiplicationFactor */
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;
                    case 10: /* reduce ADivisionFactor */
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AModulationFactor */
		    {
			ArrayList list = new11();
			push(goTo(2), list);
		    }
		    break;
                    case 12: /* reduce AAtomApplication */
		    {
			ArrayList list = new12();
			push(goTo(3), list);
		    }
		    break;
                    case 13: /* reduce AApplicationApplication */
		    {
			ArrayList list = new13();
			push(goTo(3), list);
		    }
		    break;
                    case 14: /* reduce AConstantAtom */
		    {
			ArrayList list = new14();
			push(goTo(4), list);
		    }
		    break;
                    case 15: /* reduce AIdentifierAtom */
		    {
			ArrayList list = new15();
			push(goTo(4), list);
		    }
		    break;
                    case 16: /* reduce AExpressionAtom */
		    {
			ArrayList list = new16();
			push(goTo(4), list);
		    }
		    break;
                    case 17: /* reduce AUnitConstant */
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;
                    case 18: /* reduce ABoolConstant */
		    {
			ArrayList list = new18();
			push(goTo(5), list);
		    }
		    break;
                    case 19: /* reduce ANumberConstant */
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;
                    case 20: /* reduce AOperatorConstant */
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;
                    case 21: /* reduce ATrueBool */
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;
                    case 22: /* reduce AFalseBool */
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;
                    case 23: /* reduce APlusOperator */
		    {
			ArrayList list = new23();
			push(goTo(7), list);
		    }
		    break;
                    case 24: /* reduce AMinusOperator */
		    {
			ArrayList list = new24();
			push(goTo(7), list);
		    }
		    break;
                    case 25: /* reduce AMultiplyOperator */
		    {
			ArrayList list = new25();
			push(goTo(7), list);
		    }
		    break;
                    case 26: /* reduce ADivideOperator */
		    {
			ArrayList list = new26();
			push(goTo(7), list);
		    }
		    break;
                    case 27: /* reduce AModuloOperator */
		    {
			ArrayList list = new27();
			push(goTo(7), list);
		    }
		    break;
                    case 28: /* reduce ALowerThanOperator */
		    {
			ArrayList list = new28();
			push(goTo(7), list);
		    }
		    break;
                    case 29: /* reduce AGreaterThanOperator */
		    {
			ArrayList list = new29();
			push(goTo(7), list);
		    }
		    break;
                    case 30: /* reduce ALowerEqualOperator */
		    {
			ArrayList list = new30();
			push(goTo(7), list);
		    }
		    break;
                    case 31: /* reduce AGreaterEqualOperator */
		    {
			ArrayList list = new31();
			push(goTo(7), list);
		    }
		    break;
                    case 32: /* reduce AEqualOperator */
		    {
			ArrayList list = new32();
			push(goTo(7), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PExpression node1 = (PExpression) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0() /* reduce ATermExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new1() /* reduce AConditionExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pexpressionNode1 = new AConditionExpression(pexpressionNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new2() /* reduce ALetExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pexpressionNode1 = new ALetExpression(tidentifierNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new3() /* reduce AAbstractionExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pexpressionNode1 = new AAbstractionExpression(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new4() /* reduce ARecursionExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pexpressionNode1 = new ARecursionExpression(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new5() /* reduce AFactorTerm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new6() /* reduce AAdditionTerm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new7() /* reduce ASubstractionTerm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubstractionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new8() /* reduce AApplicationFactor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new9() /* reduce AMultiplicationFactor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultiplicationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new10() /* reduce ADivisionFactor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivisionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new11() /* reduce AModulationFactor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AModulationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new12() /* reduce AAtomApplication */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new13() /* reduce AApplicationApplication */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AApplicationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new14() /* reduce AConstantAtom */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new15() /* reduce AIdentifierAtom */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new16() /* reduce AExpressionAtom */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new17() /* reduce AUnitConstant */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TUnit tunitNode2;
        tunitNode2 = (TUnit)nodeArrayList1.get(0);

        pexpressionNode1 = new AUnitExpression(tunitNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new18() /* reduce ABoolConstant */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new19() /* reduce ANumberConstant */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumberExpression(tnumberNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new20() /* reduce AOperatorConstant */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new21() /* reduce ATrueBool */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionNode1 = new ATrueExpression(ttrueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new22() /* reduce AFalseBool */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionNode1 = new AFalseExpression(tfalseNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new23() /* reduce APlusOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pexpressionNode1 = new APlusExpression(tplusNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new24() /* reduce AMinusOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pexpressionNode1 = new AMinusExpression(tminusNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new25() /* reduce AMultiplyOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TMultiply tmultiplyNode2;
        tmultiplyNode2 = (TMultiply)nodeArrayList1.get(0);

        pexpressionNode1 = new AMultiplyExpression(tmultiplyNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new26() /* reduce ADivideOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TDivide tdivideNode2;
        tdivideNode2 = (TDivide)nodeArrayList1.get(0);

        pexpressionNode1 = new ADivideExpression(tdivideNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new27() /* reduce AModuloOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TModulo tmoduloNode2;
        tmoduloNode2 = (TModulo)nodeArrayList1.get(0);

        pexpressionNode1 = new AModuloExpression(tmoduloNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new28() /* reduce ALowerThanOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLowerThan tlowerthanNode2;
        tlowerthanNode2 = (TLowerThan)nodeArrayList1.get(0);

        pexpressionNode1 = new ALowerThanExpression(tlowerthanNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new29() /* reduce AGreaterThanOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TGreaterThan tgreaterthanNode2;
        tgreaterthanNode2 = (TGreaterThan)nodeArrayList1.get(0);

        pexpressionNode1 = new AGreaterThanExpression(tgreaterthanNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new30() /* reduce ALowerEqualOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLowerEqual tlowerequalNode2;
        tlowerequalNode2 = (TLowerEqual)nodeArrayList1.get(0);

        pexpressionNode1 = new ALowerEqualExpression(tlowerequalNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new31() /* reduce AGreaterEqualOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TGreaterEqual tgreaterequalNode2;
        tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1.get(0);

        pexpressionNode1 = new AGreaterEqualExpression(tgreaterequalNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new32() /* reduce AEqualOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pexpressionNode1 = new AEqualExpression(tequalNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 1}, {0, SHIFT, 18}, {1, SHIFT, 19}, {2, SHIFT, 20}, {3, SHIFT, 21}, {4, SHIFT, 22}, {5, SHIFT, 23}, {6, SHIFT, 24}, {7, SHIFT, 25}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 2}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 3}, {24, SHIFT, 31}, },
			{{-1, ERROR, 4}, {24, SHIFT, 32}, },
			{{-1, ERROR, 5}, {24, SHIFT, 33}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 11}, {25, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 34}, {1, SHIFT, 35}, },
			{{-1, REDUCE, 5}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, },
			{{-1, REDUCE, 8}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 28}, {11, SHIFT, 40}, },
			{{-1, ERROR, 29}, {11, SHIFT, 41}, },
			{{-1, ERROR, 30}, {0, SHIFT, 34}, {1, SHIFT, 35}, {14, SHIFT, 42}, },
			{{-1, ERROR, 31}, {12, SHIFT, 43}, },
			{{-1, ERROR, 32}, {9, SHIFT, 44}, },
			{{-1, ERROR, 33}, {12, SHIFT, 45}, },
			{{-1, ERROR, 34}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 35}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 36}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 37}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 38}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 42}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 43}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 44}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 45}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, REDUCE, 6}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, },
			{{-1, REDUCE, 7}, {2, SHIFT, 36}, {3, SHIFT, 37}, {4, SHIFT, 38}, },
			{{-1, REDUCE, 9}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, REDUCE, 10}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, REDUCE, 11}, {10, SHIFT, 1}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 51}, {15, SHIFT, 55}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 53}, {18, SHIFT, 56}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 55}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 56}, {10, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 11}, {1, 28}, {42, 51}, {43, 52}, {44, 53}, {45, 54}, {55, 57}, {56, 58}, },
			{{-1, 12}, {2, 30}, },
			{{-1, 13}, {34, 46}, {35, 47}, },
			{{-1, 14}, {36, 48}, {37, 49}, {38, 50}, },
			{{-1, 15}, {14, 39}, {48, 39}, {49, 39}, {50, 39}, },
			{{-1, 16}, },
			{{-1, 17}, },
			{{-1, 29}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '(', 'if', 'lambda', 'let', 'rec', '()', 'true', 'false', number, identifier",
			"expecting: '+', '-', '*', '/', 'mod', '<', '>', '<=', '>=', '=', '(', 'if', 'lambda', 'let', 'rec', '()', 'true', 'false', number, identifier",
			"expecting: '(', '()', 'true', 'false', number, identifier",
			"expecting: identifier",
			"expecting: '+', '-', '*', '/', 'mod', '(', ')', 'then', 'else', 'in', '()', 'true', 'false', number, identifier, EOF",
			"expecting: EOF",
			"expecting: '+', '-', ')', 'else', 'in', EOF",
			"expecting: '+', '-', '*', '/', 'mod', ')', 'then', 'else', 'in', EOF",
			"expecting: ')'",
			"expecting: '+', '-', 'then'",
			"expecting: '.'",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: ')', 'else', 'in', EOF",
			"expecting: 'in'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 6, 7, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 11, 10, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 0, 0, 7, 7, 4, 4, 4, 12, 13, 14, 13, 0, 0, 13, 13, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            actionTable = new int[length][][];
            for(int i = 0; i < actionTable.length; i++)
            {
                length = s.readInt();
                actionTable[i] = new int[length][3];
                for(int j = 0; j < actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
