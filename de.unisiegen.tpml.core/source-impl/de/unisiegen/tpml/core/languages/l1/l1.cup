import de.unisiegen.tpml.core.expressions.And ;
import de.unisiegen.tpml.core.expressions.Application ;
import de.unisiegen.tpml.core.expressions.ArithmeticOperator ;
import de.unisiegen.tpml.core.expressions.BinaryOperator ;
import de.unisiegen.tpml.core.expressions.BooleanConstant ;
import de.unisiegen.tpml.core.expressions.Coercion;
import de.unisiegen.tpml.core.expressions.Condition ;
import de.unisiegen.tpml.core.expressions.Constant ;
import de.unisiegen.tpml.core.expressions.CurriedLet ;
import de.unisiegen.tpml.core.expressions.Expression ;
import de.unisiegen.tpml.core.expressions.Identifier ;
import de.unisiegen.tpml.core.expressions.InfixOperation ;
import de.unisiegen.tpml.core.expressions.IntegerConstant ;
import de.unisiegen.tpml.core.expressions.Lambda ;
import de.unisiegen.tpml.core.expressions.Let ;
import de.unisiegen.tpml.core.expressions.Not ;
import de.unisiegen.tpml.core.expressions.Or ;
import de.unisiegen.tpml.core.expressions.RelationalOperator ;
import de.unisiegen.tpml.core.expressions.UnitConstant ;
import de.unisiegen.tpml.core.languages.Error ;
import de.unisiegen.tpml.core.languages.IdentifierTypePair ;
import de.unisiegen.tpml.core.types.ArrowType ;
import de.unisiegen.tpml.core.types.BooleanType ;
import de.unisiegen.tpml.core.types.IntegerType ;
import de.unisiegen.tpml.core.types.MonoType ;
import de.unisiegen.tpml.core.types.TypeName ;
import de.unisiegen.tpml.core.types.TypeVariable ;
import de.unisiegen.tpml.core.types.UnitType ;


/* Terminals */
terminal			PLUS;
terminal			MINUS;
terminal			STAR;
terminal			SLASH;
terminal			MOD;
terminal			EQUAL;
terminal			LESS;
terminal			GREATER;
terminal			LESSEQUAL;
terminal			GREATEREQUAL;
terminal			AMPERAMPER;
terminal			BARBAR;
terminal			NOT;

/* Syntactic */
terminal			DOT;
terminal			LPAREN;
terminal			RPAREN;
terminal			ARROW;
terminal			COLON;
terminal			PARENPAREN;
terminal			SUBTYPE;

/* Keywords */
terminal			LAMBDA;
terminal			LET;
terminal			IN;
terminal			IF;
terminal			THEN;
terminal			ELSE;
terminal			TRUE;
terminal			FALSE;

/* Types */
terminal			BOOL;
terminal			INT;
terminal			UNIT;

/* Special */
terminal String		IDENTIFIER;
terminal			COMMENT;
terminal Integer	NUMBER;
terminal Integer	TYPEVARIABLE;

/* Non terminal - Expression */
non terminal Expression				seq_expr;
non terminal Expression				expr;
non terminal Expression				simple_expr;
non terminal Expression[]			simple_expr_list;
non terminal Identifier				identifier;
non terminal Expression				application;
non terminal Lambda					lambda;
non terminal Constant				constant;
non terminal BinaryOperator			operator;
non terminal ArithmeticOperator		arithmetic_operator;
non terminal RelationalOperator		relational_operator;
non terminal InfixOperation 		infix_operation;
non terminal InfixOperation 		infix_operation_plus;
non terminal InfixOperation 		infix_operation_minus;
non terminal InfixOperation 		infix_operation_mult;
non terminal InfixOperation 		infix_operation_div;
non terminal InfixOperation 		infix_operation_mod;
non terminal InfixOperation 		infix_operation_equal;
non terminal InfixOperation 		infix_operation_less;
non terminal InfixOperation 		infix_operation_greater;
non terminal InfixOperation 		infix_operation_less_equal;
non terminal InfixOperation 		infix_operation_greater_equal;
non terminal And					and;
non terminal Or						or;
non terminal Condition				condition;
non terminal Let					let;
non terminal CurriedLet				curried_let;
non terminal UnitConstant			unit_constant;
non terminal BooleanConstant		boolean_constant;
non terminal IntegerConstant		integer_constant;
non terminal Not					not;
non terminal Coercion				coercion;

/* Non terminal - Type */
non terminal MonoType				type;
non terminal MonoType				simple_type;
non terminal BooleanType			boolean_type;
non terminal IntegerType			integer_type;
non terminal UnitType				unit_type;
non terminal TypeVariable			type_variable;
non terminal ArrowType				arrow_type;

/* Non terminal - Helper */
non terminal IdentifierTypePair[]			curried_let_list;
non terminal IdentifierTypePair				curried_let_pair;

/* Non terminal - Error */
non terminal 		epsilon;
non terminal 		simple_expr_error;
non terminal 		lambda_error;
non terminal 		and_error;
non terminal 		or_error;
non terminal 		condition_error;
non terminal 		let_error;
non terminal 		curried_let_error;
non terminal 		curried_let_pair_error;
non terminal 		infix_operation_plus_error;
non terminal  		infix_operation_minus_error;
non terminal  		infix_operation_mult_error;
non terminal  		infix_operation_div_error;
non terminal  		infix_operation_mod_error;
non terminal  		infix_operation_equal_error;
non terminal  		infix_operation_less_error;
non terminal  		infix_operation_greater_error;
non terminal  		infix_operation_less_equal_error;
non terminal  		infix_operation_greater_equal_error;
non terminal		coercion_error;
non terminal 		simple_type_error;
non terminal 		arrow_type_error;

/* Precedence */
precedence right	ARROW;
precedence right	BARBAR;
precedence right	AMPERAMPER;
precedence left		EQUAL;
precedence left		LESS;
precedence left		GREATER;
precedence left		LESSEQUAL;
precedence left		GREATEREQUAL;
precedence left		PLUS;
precedence left		MINUS;
precedence left		STAR;
precedence left		SLASH;
precedence left		MOD;


/***************
 * Expressions *
 ***************/


seq_expr						::= expr:e
									{: RESULT = e; :}
								;

expr							::=	simple_expr:e
									{: RESULT = e; :}
								|   application:a
									{: RESULT = a; :}
								|	lambda:l
									{: RESULT = l; :}
								|   infix_operation:i
									{: RESULT = i; :}
								|	and:a
									{: RESULT = a; :}
								|	or:o
									{: RESULT = o; :}
								|	condition:c
									{: RESULT = c; :}
								|	let:l
									{: RESULT = l; :}
								|	curried_let:c
									{: RESULT = c; :}
								;

identifier						::= IDENTIFIER:id
									{: RESULT = new Identifier (id,Identifier.Set.VARIABLE,idleft,idright); :}
								;

application						::= simple_expr:e simple_expr_list:l
									{:
									   for (int n = 0; n < l.length; ++n) 
						  			   {
						    			 e = new Application(e, l[n],
						      			   e.getParserStartOffset ( ) , 
						       				 l[n].getParserEndOffset ( ) );
						   			   }
						   			   RESULT = e; 
						   			:}
								;

infix_operation					::= infix_operation_plus:i
									{: RESULT = i ; :}
								|	infix_operation_minus:i
									{: RESULT = i ; :}
								|	infix_operation_mult:i
									{: RESULT = i ; :}
								|	infix_operation_div:i
									{: RESULT = i ; :}
								|	infix_operation_mod:i
									{: RESULT = i ; :}
								|	infix_operation_equal:i
									{: RESULT = i ; :}
								|	infix_operation_less:i
									{: RESULT = i ; :}
								|	infix_operation_greater:i
									{: RESULT = i ; :}
								|	infix_operation_less_equal:i
									{: RESULT = i ; :}
								|	infix_operation_greater_equal:i
									{: RESULT = i ; :}
								;

infix_operation_plus			::= expr:e1 PLUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newPlus(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_plus_error
									{: :}
								;

infix_operation_plus_error		::= expr:e1 PLUS:p epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, pright, "e2" ); :}
								;

infix_operation_minus			::= expr:e1 MINUS:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMinus(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_minus_error
									{: :}
								;

infix_operation_minus_error		::= expr:e1 MINUS:m epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, mright, "e2" ); :}
								;

infix_operation_mult			::=	expr:e1 STAR:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMult(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_mult_error
									{: :}
								;

infix_operation_mult_error		::= expr:e1 STAR:s epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, sright, "e2" ); :}
								;

infix_operation_div				::=	expr:e1 SLASH:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newDiv(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_div_error
									{: :}
								;

infix_operation_div_error		::= expr:e1 SLASH:s epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, sright, "e2" ); :}
								;

infix_operation_mod				::=	expr:e1 MOD:op expr:e2
									{: RESULT = new InfixOperation(ArithmeticOperator.newMod(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_mod_error
									{: :}
								;

infix_operation_mod_error		::= expr:e1 MOD:m epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, mright, "e2" ); :}
								;

infix_operation_equal			::=	expr:e1 EQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newEquals(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_equal_error
									{: :}
								;

infix_operation_equal_error		::= expr:e1 EQUAL:e epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, eright, "e2" ); :}
								;

infix_operation_less			::=	expr:e1 LESS:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_less_error
									{: :}
								;

infix_operation_less_error		::= expr:e1 LESS:l epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, lright, "e2" ); :}
								;
						
infix_operation_greater			::=	expr:e1 GREATER:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterThan(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_greater_error
									{: :}
								;

infix_operation_greater_error	::= expr:e1 GREATER:g epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, gright, "e2" ); :}
								;

infix_operation_less_equal		::=	expr:e1 LESSEQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newLowerEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_less_equal_error
									{: :}
								;

infix_operation_less_equal_error	::= expr:e1 LESSEQUAL:l epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, lright, "e2" ); :}
								;

infix_operation_greater_equal	::=	expr:e1 GREATEREQUAL:op expr:e2
									{: RESULT = new InfixOperation(RelationalOperator.newGreaterEqual(opleft, opright), e1, e2, e1left, e2right); :}
								|	infix_operation_greater_equal_error
									{: :}
								;

infix_operation_greater_equal_error	::= expr:e1 GREATEREQUAL:g epsilon
									{: Error.expect("Infix-Operation", " e2", e1left, gright, "e2" ); :}
								;

and								::= expr:e1 AMPERAMPER expr:e2
									{: RESULT = new And(e1, e2,e1left,e2right); :}
								|	and_error
									{: :}
								;

and_error						::= expr:e1 AMPERAMPER:a epsilon
									{: Error.expect("And", " e2", e1left, aright, "e2" ); :}
								;

or								::= expr:e1 BARBAR expr:e2
									{: RESULT = new Or(e1, e2, e1left, e2right); :}
								|	or_error
									{: :}
								;

or_error						::= expr:e1 BARBAR:b epsilon
									{: Error.expect("Or", " e2", e1left, bright, "e2" ); :}
								;

condition						::= IF:i seq_expr:e0 THEN seq_expr:e1 ELSE seq_expr:e2
									{: RESULT = new Condition(e0, e1, e2, ileft, e2right); :}
								|	condition_error
									{: :}
								;

condition_error					::= IF:i epsilon
									{: Error.expect("Condition", " e0 then e1 else e2", ileft, iright, "e0"," ","then"," ","e1"," ","else"," ","e2" ); :}
								|	IF:i seq_expr:e epsilon
									{: Error.expect("Condition", " then e1 else e2", ileft, eright, "then"," ","e1"," ","else"," ","e2" ); :}
								|	IF:i seq_expr THEN:t epsilon
									{: Error.expect("Condition", " e1 else e2", ileft, tright, "e1"," ","else"," ","e2" ); :}
								|	IF:i seq_expr THEN seq_expr:e epsilon
									{: Error.expect("Condition", " else e2", ileft, eright, "else"," ","e2" ); :}
								|	IF:i seq_expr THEN seq_expr ELSE:e epsilon
									{: Error.expect("Condition", " e2", ileft, eright, "e2" ); :}
								// Missing e0
								|	IF:i THEN
									{: Error.expect("Condition", " e0 ", ileft, iright, "e0" ); :}
								// Missing e1
								|	IF:i seq_expr THEN:t ELSE
									{: Error.expect("Condition", " e1 ", ileft, tright, "e1" ); :}
								// Missing e0 and then
								|	IF:i seq_expr ELSE
									{: Error.expect("Condition", " e0 then ", ileft, iright, "e0"," ","then" ); :}
								// Missing e0, then and e1
								|	IF:i ELSE
									{: Error.expect("Condition", " e0 then e1 ", ileft, iright, "e0"," ","then"," ","e1" ); :}
								;

lambda							::= LAMBDA:l IDENTIFIER:id DOT seq_expr:e
									{: RESULT = new Lambda(new Identifier (id,Identifier.Set.VARIABLE,idleft,idright), null, e, lleft, eright); :}
								|	LAMBDA:l IDENTIFIER:id COLON type:tau DOT seq_expr:e
									{: RESULT = new Lambda(new Identifier (id,Identifier.Set.VARIABLE,idleft,idright), tau, e, lleft, eright); :}
								|	lambda_error
									{: :}
								;

lambda_error					::= LAMBDA:l epsilon
									{: Error.expect("Lambda", " id.e", lleft, lright, "id","[",":"," ","\u03C4","]",".","e" ); :}
								|	LAMBDA:l IDENTIFIER:i epsilon
									{: Error.expect("Lambda", ".e", lleft, iright, "[",":"," ","\u03C4","]",".","e" ); :}
								|	LAMBDA:l IDENTIFIER DOT:d epsilon
									{: Error.expect("Lambda", "e", lleft, dright, "e" ); :}
								|	LAMBDA:l IDENTIFIER COLON:c epsilon
									{: Error.expect("Lambda", " \u03C4.e", lleft, cright, "\u03C4",".","e" ); :}
								|	LAMBDA:l IDENTIFIER COLON type:t epsilon
									{: Error.expect("Lambda", ".e", lleft, tright, ".","e" ); :}
								|	LAMBDA:l IDENTIFIER COLON type DOT:d epsilon
									{: Error.expect("Lambda", "e", lleft, dright, "e" ); :}
								// Missing identifier
								|	LAMBDA:l DOT
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}
								|	LAMBDA:l COLON
									{: Error.expect("Lambda", " id", lleft, lright, "id" ); :}
								// Missing dot
								|	LAMBDA:l IDENTIFIER:id seq_expr
									{: Error.expect("Lambda", ".", lleft, idright, "." ); :}
								|	LAMBDA:l IDENTIFIER COLON type:tau seq_expr
									{: Error.expect("Lambda", ".", lleft, tauright, "." ); :}
								// Missing colon
								|	LAMBDA:l IDENTIFIER:id type
									{: Error.expect("Lambda", ": ", lleft, idright, ":" ); :}
								// Missing type
								|	LAMBDA:l IDENTIFIER COLON:c DOT
									{: Error.expect("Lambda", " \u03C4", lleft, cright, "\u03C4" ); :}
								// Missing identifier and colon
								|	LAMBDA:l type
									{: Error.expect("Lambda", " id: ", lleft, lright, "id",":" ); :}
								// Missing type and dot
								|	LAMBDA:l IDENTIFIER COLON:c seq_expr:e
									{: Error.expect("Lambda", " \u03C4.", lleft, cright, "\u03C4","." ); :}
								;

let								::= LET:l IDENTIFIER:id EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new Let(new Identifier (id,Identifier.Set.VARIABLE,idleft,idright), null, e1, e2, lleft, e2right); :}
								|	LET:l IDENTIFIER:id COLON type:tau EQUAL seq_expr:e1 IN seq_expr:e2
									{: RESULT = new Let(new Identifier (id,Identifier.Set.VARIABLE,idleft,idright), tau, e1, e2, lleft, e2right); :}
								|	let_error
									{: :}
								;

let_error						::= LET:l epsilon
									{: Error.expect("Let", " id = e1 in e2", lleft, lright, "id","[",":"," ","\u03C4","]"," ","="," ","e1"," ","in"," ","e2" ); :}
								|	LET:l IDENTIFIER:i epsilon
									{: Error.expect("Let", " = e1 in e2", lleft, iright, "[",":"," ","\u03C4","]"," ","="," ","e1"," ","in"," ","e2" ); :}			
								|	LET:l IDENTIFIER COLON:c epsilon
									{: Error.expect("Let", " \u03C4 = e1 in e2", lleft, cright, "\u03C4"," ","="," ","e1"," ","in"," ","e2" ); :}	
								|	LET:l IDENTIFIER COLON type:t epsilon
									{: Error.expect("Let", " = e1 in e2", lleft, tright, "="," ","e1"," ","in"," ","e2" ); :}			
								|	LET:l IDENTIFIER COLON type EQUAL:e epsilon
									{: Error.expect("Let", " e1 in e2", lleft, eright, "e1"," ","in"," ","e2" ); :}
								|	LET:l IDENTIFIER COLON type EQUAL seq_expr:e epsilon
									{: Error.expect("Let", " in e2", lleft, eright, "in"," ","e2" ); :}
								|	LET:l IDENTIFIER COLON type EQUAL seq_expr IN:i epsilon
									{: Error.expect("Let", " e2", lleft, iright, "e2" ); :}
								|	LET:l IDENTIFIER EQUAL:e epsilon
									{: Error.expect("Let", " e1 in e2", lleft, eright, "e1"," ","in"," ","e2" ); :}
								|	LET:l IDENTIFIER EQUAL seq_expr:e epsilon
									{: Error.expect("Let", " in e2", lleft, eright, "in"," ","e2" ); :}
								|	LET:l IDENTIFIER EQUAL seq_expr IN:i epsilon
									{: Error.expect("Let", " e2", lleft, iright, "e2" ); :}
								// Missing identifier
								|	LET:l EQUAL
									{: Error.expect("Let", " id ", lleft, lright, "id" ); :}
								|	LET:l COLON
									{: Error.expect("Let", " id ", lleft, lright, "id" ); :}
								// Missing equal							
								|	LET:l IDENTIFIER COLON type:tau seq_expr
									{: Error.expect("Let", " = ", lleft, tauright, "=" ); :}
								// Missing colon
								|	LET:l IDENTIFIER:id type
									{: Error.expect("Let", ": ", lleft, idright, ":" ); :}
								// Missing type
								|	LET:l IDENTIFIER COLON:c EQUAL
									{: Error.expect("Let", " \u03C4 ", lleft, cright, "\u03C4" ); :}
								// Missing e1
								|	LET:l IDENTIFIER EQUAL:e IN
									{: Error.expect("Let", " e1 ", lleft, eright, "e1" ); :}
								|	LET:l IDENTIFIER COLON type EQUAL:e IN
									{: Error.expect("Let", " e1 ", lleft, eright, "e1" ); :}
								// Missing equal and e1
								|	LET:l IDENTIFIER:id IN
									{: Error.expect("Let", " = e1 ", lleft, idright, "="," ","e1" ); :}
								|	LET:l IDENTIFIER COLON type:tau IN
									{: Error.expect("Let", " = e1 ", lleft, tauright, "="," ","e1" ); :}
								// Missing identifier and colon
								|	LET:l type
									{: Error.expect("Let", " id: ", lleft, lright, "id",":" ); :}
								// Missing type and equal
								|	LET:l IDENTIFIER COLON:c seq_expr
									{: Error.expect("Let", " \u03C4 = ", lleft, cright, "\u03C4"," ","=" ); :}
								// Missing identifier, equal and e1
								|	LET:l IN
									{: Error.expect("Let", " id = e1 ", lleft, lright, "id"," ","="," ","e1" ); :}
								// Missing type, equal and e1
								|	LET:l IDENTIFIER COLON:c IN
									{: Error.expect("Let", " \u03C4 = e1 ", lleft, cright, "\u03C4"," ","="," ","e1" ); :}
								;

curried_let						::= LET:l IDENTIFIER:id curried_let_list:itl EQUAL seq_expr:e1 IN seq_expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].getId();
									     types[n + 1] = itl[n].getTau();
									   }
									   identifiers[0] = new Identifier (id,Identifier.Set.VARIABLE,idleft,idright);
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	LET:l IDENTIFIER:id curried_let_list:itl COLON type:tau EQUAL seq_expr:e1 IN seq_expr:e2
									{:
									   Identifier[] identifiers = new Identifier[itl.length + 1];
									   MonoType[] types = new MonoType[itl.length + 1];
									   for (int n = 0; n < itl.length; ++n) 
									   {
									     identifiers[n + 1] = itl[n].getId();
									     types[n + 1] = itl[n].getTau();
									   }
									   identifiers[0] = new Identifier (id,Identifier.Set.VARIABLE,idleft,idright);
									   types[0] = tau;
									   RESULT = new CurriedLet(identifiers, types, e1, e2, lleft, e2right);
									:}
								|	curried_let_error
									{: :}
								;

curried_let_error				::= LET:l IDENTIFIER curried_let_list:c epsilon
									{: Error.expect("Curried-Let", " = e1 in e2", lleft, cright, "[",":"," ","\u03C4","]"," ","="," ","e1"," ","in"," ","e2"  ); :}
								|	LET:l IDENTIFIER curried_let_list COLON:c epsilon
									{: Error.expect("Curried-Let", " \u03C4 = e1 in e2", lleft, cright, "\u03C4"," ","="," ","e1"," ","in"," ","e2" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type:t epsilon
									{: Error.expect("Curried-Let", " = e1 in e2", lleft, tright, "="," ","e1"," ","in"," ","e2" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type EQUAL:e epsilon
									{: Error.expect("Curried-Let", " e1 in e2", lleft, eright, "e1"," ","in"," ","e2" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type EQUAL seq_expr:e epsilon
									{: Error.expect("Curried-Let", " in e2", lleft, eright, "in"," ","e2" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type EQUAL seq_expr IN:i epsilon
									{: Error.expect("Curried-Let", " e2", lleft, iright, "e2" ); :}
								|	LET:l IDENTIFIER curried_let_list EQUAL:e epsilon
									{: Error.expect("Curried-Let", " e1 in e2", lleft, eright, "e1"," ","in"," ","e2" ); :}
								|	LET:l IDENTIFIER curried_let_list EQUAL seq_expr:e epsilon
									{: Error.expect("Curried-Let", " in e2", lleft, eright, "in"," ","e2" ); :}
								|	LET:l IDENTIFIER curried_let_list EQUAL seq_expr IN:i epsilon
									{: Error.expect("Curried-Let", " e2", lleft, iright, "e2" ); :}
								// Missing e1
								|	LET:l IDENTIFIER curried_let_list EQUAL:e IN
									{: Error.expect("Curried-Let", " e1 ", lleft, eright, "e1" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type EQUAL:e IN
									{: Error.expect("Curried-Let", " e1 ", lleft, eright, "e1" ); :}									
								// Missing colon
								|	LET:l IDENTIFIER curried_let_list:cll type
									{: Error.expect("Curried-Let", ": ", lleft, cllright, ":" ); :}								
								// Missing type
								|	LET:l IDENTIFIER curried_let_list COLON:c EQUAL
									{: Error.expect("Curried-Let", " \u03C4 ", lleft, cright, "\u03C4" ); :}
								// Missing equal
								|	LET:l IDENTIFIER curried_let_list COLON type:tau seq_expr
									{: Error.expect("Curried-Let", " = ", lleft, tauright, "=" ); :}
								// Missing equal and e1
								|	LET:l IDENTIFIER curried_let_list:cll IN
									{: Error.expect("Curried-Let", " = e1 ", lleft, cllright, "="," ","e1" ); :}
								|	LET:l IDENTIFIER curried_let_list COLON type:tau IN
									{: Error.expect("Curried-Let", " = e1 ", lleft, tauright, "="," ","e1" ); :}
								// Missing type and equal
								|	LET:l IDENTIFIER curried_let_list COLON:c seq_expr
									{: Error.expect("Curried-Let", " \u03C4 = ", lleft, cright, "\u03C4"," ","=" ); :}
								// Missing type, equal and e1	
								|	LET:l IDENTIFIER curried_let_list COLON:c IN
									{: Error.expect("Curried-Let", " \u03C4 = e1 ", lleft, cright, "\u03C4"," ","="," ","e1" ); :}
								;

curried_let_list				::= curried_let_pair:p curried_let_list:l 
									{: 
									   RESULT = new IdentifierTypePair[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 1, l.length);
									   RESULT[0] = p;
									:}
								|	curried_let_pair:p
									{: RESULT = new IdentifierTypePair[] { p }; :}
								;

curried_let_pair				::= LPAREN IDENTIFIER:id COLON type:tau RPAREN
									{: RESULT = new IdentifierTypePair(new Identifier (id,Identifier.Set.VARIABLE,idleft,idright), tau); :}
								|	IDENTIFIER:id
									{: RESULT = new IdentifierTypePair(new Identifier (id,Identifier.Set.VARIABLE,idleft,idright), null); :}
								|	curried_let_pair_error
									{: :}
								;

curried_let_pair_error			::= LPAREN:l epsilon
									{: Error.expect("Curried-Let", "id: \u03C4)", lleft, lright, "id","[",":"," ","\u03C4","]",")" ); :}
								|	LPAREN:l IDENTIFIER:i epsilon
									{: Error.expect("Curried-Let", ": \u03C4)", lleft, iright, "[",":"," ","\u03C4","]",")" ); :}
								|	LPAREN:l IDENTIFIER COLON:c epsilon
									{: Error.expect("Curried-Let", " \u03C4)", lleft, cright, "\u03C4",")" ); :}
								|	LPAREN:l IDENTIFIER COLON type:t epsilon
									{: Error.expect("Curried-Let", ")", lleft, tright, ")" ); :}
								// Missing type
								|	LPAREN:l IDENTIFIER COLON:c RPAREN
									{: Error.expect("Curried-Let", " \u03C4", lleft, cright, "\u03C4" ); :}
								;

coercion						::= LPAREN:l seq_expr:e COLON type:tau1 SUBTYPE type:tau2 RPAREN:r
									{: RESULT = new Coercion (e, tau1, tau2, lleft, rright); :}
								|	coercion_error
									{: :}
								;

coercion_error					::= LPAREN:l seq_expr COLON:c
									{: Error.expect("Coercion", " int <: int)", lleft, cright, "\u03C4"," ","<:"," ","\u03C4",")" ); :}
								|	LPAREN:l seq_expr COLON type:tau1
									{: Error.expect("Coercion", " <: int)", lleft, tau1right, "<:"," ","\u03C4",")" ); :}
								|	LPAREN:l seq_expr COLON type SUBTYPE:s
									{: Error.expect("Coercion", " int)", lleft, sright, "\u03C4",")" ); :}
								|	LPAREN:l seq_expr COLON type SUBTYPE type:tau2
									{: Error.expect("Coercion", ")", lleft, tau2right, ")" ); :}
								// Missing colon
								|	LPAREN:l seq_expr:e type
									{: Error.expect("Coercion", ": ", lleft, eright, ":" ); :}
								// Missing type 1
								|	LPAREN:l seq_expr COLON:c SUBTYPE
									{: Error.expect("Coercion", " int ", lleft, cright, "\u03C4" ); :}
								// Missing subtype
								|	LPAREN:l seq_expr COLON type:tau1 type
									{: Error.expect("Coercion", " <: ", lleft, tau1right, "<:" ); :}
								// Missing type 2
								|	LPAREN:l seq_expr COLON type SUBTYPE:s RPAREN
									{: Error.expect("Coercion", " int", lleft, sright, "\u03C4" ); :}
								// Missing colon and type 1
								|	LPAREN:l seq_expr:e SUBTYPE
									{: Error.expect("Coercion", ": int ", lleft, eright, ":"," ","\u03C4" ); :}
								// Missing subtyping and type 2
								|	LPAREN:l seq_expr COLON type:tau1 RPAREN
									{: Error.expect("Coercion", " <: int", lleft, tau1right, "<:"," ","\u03C4" ); :}
								// Missing type 1, subtyping and type 2
								|	LPAREN:l seq_expr COLON:c RPAREN
									{: Error.expect("Coercion", " int <: int", lleft, cright, "\u03C4"," ","<:"," ","\u03C4" ); :}
								;

constant						::=	unit_constant:u
									{: RESULT = u; :}
								|	boolean_constant:b
									{: RESULT = b; :}
								|	integer_constant:i
									{: RESULT = i; :}
								|	not:n
									{: RESULT = n; :}
								;

unit_constant					::= PARENPAREN:u
									{: RESULT = new UnitConstant(uleft, uright); :}
								;

boolean_constant				::= TRUE:t
									{: RESULT = new BooleanConstant(true, tleft, tright); :}
								|	FALSE:f
									{: RESULT = new BooleanConstant(false, fleft, fright); :}
								;

integer_constant				::= NUMBER:n
									{: RESULT = new IntegerConstant(n.intValue(), nleft, nright); :}
								;

not								::= NOT:n
									{: RESULT = new Not(nleft, nright); :}
								;

operator						::=	arithmetic_operator:a
									{: RESULT = a; :}
								|	relational_operator:r
									{: RESULT = r; :}
								;

arithmetic_operator				::= PLUS:op		
									{: RESULT = ArithmeticOperator.newPlus(opleft, opright); :}
								|	MINUS:op		
									{: RESULT = ArithmeticOperator.newMinus(opleft, opright); :}
								|	STAR:op			
									{: RESULT = ArithmeticOperator.newMult(opleft, opright); :}
								|	SLASH:op			
									{: RESULT = ArithmeticOperator.newDiv(opleft, opright); :}
								|	MOD:op			
									{: RESULT = ArithmeticOperator.newMod(opleft, opright); :}
								;

relational_operator				::= EQUAL:op			
									{: RESULT = RelationalOperator.newEquals(opleft, opright); :}
								|	LESS:op			
									{: RESULT = RelationalOperator.newLowerThan(opleft, opright); :}
								|	GREATER:op		
									{: RESULT = RelationalOperator.newGreaterThan(opleft, opright); :}
								|	LESSEQUAL:op		
									{: RESULT = RelationalOperator.newLowerEqual(opleft, opright); :}
								|	GREATEREQUAL:op
									{: RESULT = RelationalOperator.newGreaterEqual(opleft, opright); :}
								;

simple_expr						::=	constant:c
									{: RESULT = c; :}
								|	identifier:id
									{: RESULT = id; :}
								|	LPAREN:l operator:o RPAREN:r
									{: 
									   o.setParserStartOffset(lleft);
									   o.setParserEndOffset(rright);
									   RESULT = o;
									:}
								|	LPAREN:l seq_expr:e RPAREN:r
									{: 
									   e.setParserStartOffset(lleft);
									   e.setParserEndOffset(rright);
									   RESULT = e;
									:}
								|	coercion:c
									{: RESULT = c; :}
								|	simple_expr_error
									{: :}
								;

simple_expr_error				::= LPAREN:l seq_expr:e epsilon
									{: Error.expect("Expression", ")", lleft, eright, ")"); :}
								|	LPAREN:l operator:o epsilon
									{: Error.expect("Operator", ")", lleft, oright, ")"); :}
								|	LPAREN:l epsilon
									{: Error.expect("Expression", "e)", lleft, lright, "... )"); :}
								;

simple_expr_list				::=	simple_expr:e simple_expr_list:l 
									{:
									   RESULT = new Expression[l.length + 1];
									   System.arraycopy(l, 0, RESULT, 1, l.length);
									   RESULT[0] = e;
									:}
								|	simple_expr:e
									{: RESULT = new Expression[] { e }; :}
								;

epsilon							::= /* epsilon */
									{: :}	
								;


/*********
 * Types *
 *********/


type							::=	simple_type:t
									{: RESULT = t; :}
								|	arrow_type:a
									{: RESULT = a; :}
								;

simple_type						::=	LPAREN:l type:t RPAREN:r
									{: 
									   t.setParserStartOffset(lleft);
									   t.setParserEndOffset(rright);
									   RESULT = t;
									:}
								|	boolean_type:b
									{: RESULT = b; :}
								|	integer_type:i
									{: RESULT = i; :}
								|	unit_type:u
									{: RESULT = u; :}
								|	type_variable:t
									{: RESULT = t; :}
								|	simple_type_error
									{: :}
								;

simple_type_error				::= LPAREN:l epsilon
									{: Error.expect("Type", "\u03C4)", lleft, lright, "\u03C4",")"); :}
								|	LPAREN:l type:t epsilon
									{: Error.expect("Type", ")", lleft, tright, ")"); :}
								;

arrow_type						::= type:t1 ARROW type:t2
									{: RESULT = new ArrowType(t1, t2, t1left, t2right); :}
								|	arrow_type_error
									{: :}
								;

arrow_type_error				::= type:t ARROW:a epsilon 
									{: Error.expect("Arrow-Type", " \u03C4", tleft, aright, "\u03C4"); :}
								;

boolean_type					::= BOOL:b
									{: RESULT = new BooleanType(bleft, bright); :}
								;

integer_type					::= INT:i
									{: RESULT = new IntegerType(ileft, iright); :}
								;

unit_type						::= UNIT:u
									{: RESULT = new UnitType(uleft, uright); :}
								;

type_variable					::= TYPEVARIABLE:t
									{: RESULT = new TypeVariable(0, t, tleft, tright); :}
								;