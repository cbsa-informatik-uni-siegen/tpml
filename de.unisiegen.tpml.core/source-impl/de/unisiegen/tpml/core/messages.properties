# General strings
AbstractLanguage.0=The language {1} does not include a type system
ProofGuessException.0=Cannot guess next proof step for {1}

# Parser strings
Parser.0=Unexpected end of file
Parser.1=Syntax error on token "{1}"

# Typechecker strings
UnificationException.0=Cannot unify {1}

# L0 strings
L0BigStepProofRuleSet.0=(BETA-V) can only be applied if the operand is already a value
L0BigStepProofRuleSet.1=(VAL) can only be applied to values
L0Language.0=The simplest possible programming language with only \u03BB-abstraction, identifiers and applications.
L0Language.1=Pure untyped \u03BB calculus

# L1 strings
L1BigStepProofRuleSet.0=(OP) cannot be used here, use (CONS) instead
L1Language.0=The simply typed \u03BB calculus extends the pure untyped \u03BB calculus with a simple type system, the let-binding, conditional execution and constants. It also allows to use operators in infix expressions.
L1Language.1=Simply typed \u03BB calculus

# L2 strings
L2Language.0=The language L2 combines the simply typed \u03BB calculus with recursive expressions.
L2Language.1=Applied \u03BB calculus with recursion

# L3 strings
L3BigStepProofRuleSet.0=(HD) can only be applied if the operand is already a value
L3BigStepProofRuleSet.1=(HD) can only be applied if the operand is either a list or an application of cons to a pair
L3BigStepProofRuleSet.2=(IS-EMPTY-FALSE) can only be applied if the operand is already a value
L3BigStepProofRuleSet.3=(IS-EMPTY-FALSE) and (IS-EMPTY-TRUE) can only be applied if the operand is either a list or an application of cons to a pair
L3BigStepProofRuleSet.4=(IS-EMPTY-TRUE) can only be applied if the operand is already a value
L3BigStepProofRuleSet.5=(TL) can only be applied if the operand is already a value
L3BigStepProofRuleSet.6=(TL) can only be applied if the operand is either a list or an application of cons to a pair
L3Language.0=The language L3 adds support for lists and tuples and provides a polymorphic type system.
L3Language.1=Applied \u03BB calculus with polymorphic type system

# L4 strings
L4Language.0=The language L4 extends L3 with imperative concepts, including syntactic sugar for sequential execution and loops.
L4Language.1=Applied \u03BB calculus with imperative concepts
